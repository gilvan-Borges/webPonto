{
  "version": 3,
  "sources": ["../../../../../../node_modules/ol/Overlay.js"],
  "sourcesContent": ["/**\r\n * @module ol/Overlay\r\n */\nimport BaseObject from './Object.js';\nimport MapEventType from './MapEventType.js';\nimport { CLASS_SELECTABLE } from './css.js';\nimport { containsExtent } from './extent.js';\nimport { listen, unlistenByKey } from './events.js';\nimport { outerHeight, outerWidth, removeChildren } from './dom.js';\n\n/**\r\n * @typedef {'bottom-left' | 'bottom-center' | 'bottom-right' | 'center-left' | 'center-center' | 'center-right' | 'top-left' | 'top-center' | 'top-right'} Positioning\r\n * The overlay position: `'bottom-left'`, `'bottom-center'`,  `'bottom-right'`,\r\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\r\n * `'top-center'`, or `'top-right'`.\r\n */\n\n/**\r\n * @typedef {Object} Options\r\n * @property {number|string} [id] Set the overlay id. The overlay id can be used\r\n * with the {@link module:ol/Map~Map#getOverlayById} method.\r\n * @property {HTMLElement} [element] The overlay element.\r\n * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning\r\n * the overlay. The first element in the\r\n * array is the horizontal offset. A positive value shifts the overlay right.\r\n * The second element in the array is the vertical offset. A positive value\r\n * shifts the overlay down.\r\n * @property {import(\"./coordinate.js\").Coordinate} [position] The overlay position\r\n * in map projection.\r\n * @property {Positioning} [positioning='top-left'] Defines how\r\n * the overlay is actually positioned with respect to its `position` property.\r\n * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,\r\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\r\n * `'top-center'`, and `'top-right'`.\r\n * @property {boolean} [stopEvent=true] Whether event propagation to the map\r\n * viewport should be stopped. If `true` the overlay is placed in the same\r\n * container as that of the controls (CSS class name\r\n * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container\r\n * with CSS class name specified by the `className` property.\r\n * @property {boolean} [insertFirst=true] Whether the overlay is inserted first\r\n * in the overlay container, or appended. If the overlay is placed in the same\r\n * container as that of the controls (see the `stopEvent` option) you will\r\n * probably set `insertFirst` to `true` so the overlay is displayed below the\r\n * controls.\r\n * @property {PanIntoViewOptions|boolean} [autoPan=false] Pan the map when calling\r\n * `setPosition`, so that the overlay is entirely visible in the current viewport.\r\n * @property {string} [className='ol-overlay-container ol-selectable'] CSS class\r\n * name.\r\n */\n\n/**\r\n * @typedef {Object} PanOptions\r\n * @property {number} [duration=1000] The duration of the animation in\r\n * milliseconds.\r\n * @property {function(number):number} [easing] The easing function to use. Can\r\n * be one from {@link module:ol/easing} or a custom function.\r\n * Default is {@link module:ol/easing.inAndOut}.\r\n */\n\n/**\r\n * @typedef {Object} PanIntoViewOptions\r\n * @property {PanOptions} [animation={}] The animation parameters for the pan\r\n * @property {number} [margin=20] The margin (in pixels) between the\r\n * overlay and the borders of the map when panning into view.\r\n */\n\n/**\r\n * @enum {string}\r\n * @protected\r\n */\nconst Property = {\n  ELEMENT: 'element',\n  MAP: 'map',\n  OFFSET: 'offset',\n  POSITION: 'position',\n  POSITIONING: 'positioning'\n};\n\n/**\r\n * @typedef {import(\"./ObjectEventType\").Types|'change:element'|'change:map'|'change:offset'|'change:position'|\r\n *   'change:positioning'} OverlayObjectEventTypes\r\n */\n\n/***\r\n * @template Return\r\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\r\n *   import(\"./Observable\").OnSignature<OverlayObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\r\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|OverlayObjectEventTypes, Return>} OverlayOnSignature\r\n */\n\n/**\r\n * @classdesc\r\n * An element to be displayed over the map and attached to a single map\r\n * location.  Like {@link module:ol/control/Control~Control}, Overlays are\r\n * visible widgets. Unlike Controls, they are not in a fixed position on the\r\n * screen, but are tied to a geographical coordinate, so panning the map will\r\n * move an Overlay but not a Control.\r\n *\r\n * Example:\r\n *\r\n *     import Overlay from 'ol/Overlay.js';\r\n *\r\n *     // ...\r\n *     const popup = new Overlay({\r\n *       element: document.getElementById('popup'),\r\n *     });\r\n *     popup.setPosition(coordinate);\r\n *     map.addOverlay(popup);\r\n *\r\n * @api\r\n */\nclass Overlay extends BaseObject {\n  /**\r\n   * @param {Options} options Overlay options.\r\n   */\n  constructor(options) {\n    super();\n\n    /***\r\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\r\n     */\n    this.on;\n\n    /***\r\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\r\n     */\n    this.once;\n\n    /***\r\n     * @type {OverlayOnSignature<void>}\r\n     */\n    this.un;\n\n    /**\r\n     * @protected\r\n     * @type {Options}\r\n     */\n    this.options = options;\n\n    /**\r\n     * @protected\r\n     * @type {number|string|undefined}\r\n     */\n    this.id = options.id;\n\n    /**\r\n     * @protected\r\n     * @type {boolean}\r\n     */\n    this.insertFirst = options.insertFirst !== undefined ? options.insertFirst : true;\n\n    /**\r\n     * @protected\r\n     * @type {boolean}\r\n     */\n    this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;\n\n    /**\r\n     * @protected\r\n     * @type {HTMLElement}\r\n     */\n    this.element = document.createElement('div');\n    this.element.className = options.className !== undefined ? options.className : 'ol-overlay-container ' + CLASS_SELECTABLE;\n    this.element.style.position = 'absolute';\n    this.element.style.pointerEvents = 'auto';\n\n    /**\r\n     * @protected\r\n     * @type {PanIntoViewOptions|undefined}\r\n     */\n    this.autoPan = options.autoPan === true ? {} : options.autoPan || undefined;\n\n    /**\r\n     * @protected\r\n     * @type {{transform_: string,\r\n     *         visible: boolean}}\r\n     */\n    this.rendered = {\n      transform_: '',\n      visible: true\n    };\n\n    /**\r\n     * @protected\r\n     * @type {?import(\"./events.js\").EventsKey}\r\n     */\n    this.mapPostrenderListenerKey = null;\n    this.addChangeListener(Property.ELEMENT, this.handleElementChanged);\n    this.addChangeListener(Property.MAP, this.handleMapChanged);\n    this.addChangeListener(Property.OFFSET, this.handleOffsetChanged);\n    this.addChangeListener(Property.POSITION, this.handlePositionChanged);\n    this.addChangeListener(Property.POSITIONING, this.handlePositioningChanged);\n    if (options.element !== undefined) {\n      this.setElement(options.element);\n    }\n    this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);\n    this.setPositioning(options.positioning || 'top-left');\n    if (options.position !== undefined) {\n      this.setPosition(options.position);\n    }\n  }\n\n  /**\r\n   * Get the DOM element of this overlay.\r\n   * @return {HTMLElement|undefined} The Element containing the overlay.\r\n   * @observable\r\n   * @api\r\n   */\n  getElement() {\n    return /** @type {HTMLElement|undefined} */this.get(Property.ELEMENT);\n  }\n\n  /**\r\n   * Get the overlay identifier which is set on constructor.\r\n   * @return {number|string|undefined} Id.\r\n   * @api\r\n   */\n  getId() {\n    return this.id;\n  }\n\n  /**\r\n   * Get the map associated with this overlay.\r\n   * @return {import(\"./Map.js\").default|null} The map that the\r\n   * overlay is part of.\r\n   * @observable\r\n   * @api\r\n   */\n  getMap() {\n    return /** @type {import(\"./Map.js\").default|null} */this.get(Property.MAP) || null;\n  }\n\n  /**\r\n   * Get the offset of this overlay.\r\n   * @return {Array<number>} The offset.\r\n   * @observable\r\n   * @api\r\n   */\n  getOffset() {\n    return /** @type {Array<number>} */this.get(Property.OFFSET);\n  }\n\n  /**\r\n   * Get the current position of this overlay.\r\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The spatial point that the overlay is\r\n   *     anchored at.\r\n   * @observable\r\n   * @api\r\n   */\n  getPosition() {\n    return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */this.get(Property.POSITION);\n  }\n\n  /**\r\n   * Get the current positioning of this overlay.\r\n   * @return {Positioning} How the overlay is positioned\r\n   *     relative to its point on the map.\r\n   * @observable\r\n   * @api\r\n   */\n  getPositioning() {\n    return /** @type {Positioning} */this.get(Property.POSITIONING);\n  }\n\n  /**\r\n   * @protected\r\n   */\n  handleElementChanged() {\n    removeChildren(this.element);\n    const element = this.getElement();\n    if (element) {\n      this.element.appendChild(element);\n    }\n  }\n\n  /**\r\n   * @protected\r\n   */\n  handleMapChanged() {\n    if (this.mapPostrenderListenerKey) {\n      this.element?.remove();\n      unlistenByKey(this.mapPostrenderListenerKey);\n      this.mapPostrenderListenerKey = null;\n    }\n    const map = this.getMap();\n    if (map) {\n      this.mapPostrenderListenerKey = listen(map, MapEventType.POSTRENDER, this.render, this);\n      this.updatePixelPosition();\n      const container = this.stopEvent ? map.getOverlayContainerStopEvent() : map.getOverlayContainer();\n      if (this.insertFirst) {\n        container.insertBefore(this.element, container.childNodes[0] || null);\n      } else {\n        container.appendChild(this.element);\n      }\n      this.performAutoPan();\n    }\n  }\n\n  /**\r\n   * @protected\r\n   */\n  render() {\n    this.updatePixelPosition();\n  }\n\n  /**\r\n   * @protected\r\n   */\n  handleOffsetChanged() {\n    this.updatePixelPosition();\n  }\n\n  /**\r\n   * @protected\r\n   */\n  handlePositionChanged() {\n    this.updatePixelPosition();\n    this.performAutoPan();\n  }\n\n  /**\r\n   * @protected\r\n   */\n  handlePositioningChanged() {\n    this.updatePixelPosition();\n  }\n\n  /**\r\n   * Set the DOM element to be associated with this overlay.\r\n   * @param {HTMLElement|undefined} element The Element containing the overlay.\r\n   * @observable\r\n   * @api\r\n   */\n  setElement(element) {\n    this.set(Property.ELEMENT, element);\n  }\n\n  /**\r\n   * Set the map to be associated with this overlay.\r\n   * @param {import(\"./Map.js\").default|null} map The map that the\r\n   * overlay is part of. Pass `null` to just remove the overlay from the current map.\r\n   * @observable\r\n   * @api\r\n   */\n  setMap(map) {\n    this.set(Property.MAP, map);\n  }\n\n  /**\r\n   * Set the offset for this overlay.\r\n   * @param {Array<number>} offset Offset.\r\n   * @observable\r\n   * @api\r\n   */\n  setOffset(offset) {\n    this.set(Property.OFFSET, offset);\n  }\n\n  /**\r\n   * Set the position for this overlay. If the position is `undefined` the\r\n   * overlay is hidden.\r\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} position The spatial point that the overlay\r\n   *     is anchored at.\r\n   * @observable\r\n   * @api\r\n   */\n  setPosition(position) {\n    this.set(Property.POSITION, position);\n  }\n\n  /**\r\n   * Pan the map so that the overlay is entirely visible in the current viewport\r\n   * (if necessary) using the configured autoPan parameters\r\n   * @protected\r\n   */\n  performAutoPan() {\n    if (this.autoPan) {\n      this.panIntoView(this.autoPan);\n    }\n  }\n\n  /**\r\n   * Pan the map so that the overlay is entirely visible in the current viewport\r\n   * (if necessary).\r\n   * @param {PanIntoViewOptions} [panIntoViewOptions] Options for the pan action\r\n   * @api\r\n   */\n  panIntoView(panIntoViewOptions) {\n    const map = this.getMap();\n    if (!map || !map.getTargetElement() || !this.get(Property.POSITION)) {\n      return;\n    }\n    const mapRect = this.getRect(map.getTargetElement(), map.getSize());\n    const element = this.getElement();\n    const overlayRect = this.getRect(element, [outerWidth(element), outerHeight(element)]);\n    panIntoViewOptions = panIntoViewOptions || {};\n    const myMargin = panIntoViewOptions.margin === undefined ? 20 : panIntoViewOptions.margin;\n    if (!containsExtent(mapRect, overlayRect)) {\n      // the overlay is not completely inside the viewport, so pan the map\n      const offsetLeft = overlayRect[0] - mapRect[0];\n      const offsetRight = mapRect[2] - overlayRect[2];\n      const offsetTop = overlayRect[1] - mapRect[1];\n      const offsetBottom = mapRect[3] - overlayRect[3];\n      const delta = [0, 0];\n      if (offsetLeft < 0) {\n        // move map to the left\n        delta[0] = offsetLeft - myMargin;\n      } else if (offsetRight < 0) {\n        // move map to the right\n        delta[0] = Math.abs(offsetRight) + myMargin;\n      }\n      if (offsetTop < 0) {\n        // move map up\n        delta[1] = offsetTop - myMargin;\n      } else if (offsetBottom < 0) {\n        // move map down\n        delta[1] = Math.abs(offsetBottom) + myMargin;\n      }\n      if (delta[0] !== 0 || delta[1] !== 0) {\n        const center = /** @type {import(\"./coordinate.js\").Coordinate} */\n        map.getView().getCenterInternal();\n        const centerPx = map.getPixelFromCoordinateInternal(center);\n        if (!centerPx) {\n          return;\n        }\n        const newCenterPx = [centerPx[0] + delta[0], centerPx[1] + delta[1]];\n        const panOptions = panIntoViewOptions.animation || {};\n        map.getView().animateInternal({\n          center: map.getCoordinateFromPixelInternal(newCenterPx),\n          duration: panOptions.duration,\n          easing: panOptions.easing\n        });\n      }\n    }\n  }\n\n  /**\r\n   * Get the extent of an element relative to the document\r\n   * @param {HTMLElement} element The element.\r\n   * @param {import(\"./size.js\").Size} size The size of the element.\r\n   * @return {import(\"./extent.js\").Extent} The extent.\r\n   * @protected\r\n   */\n  getRect(element, size) {\n    const box = element.getBoundingClientRect();\n    const offsetX = box.left + window.pageXOffset;\n    const offsetY = box.top + window.pageYOffset;\n    return [offsetX, offsetY, offsetX + size[0], offsetY + size[1]];\n  }\n\n  /**\r\n   * Set the positioning for this overlay.\r\n   * @param {Positioning} positioning how the overlay is\r\n   *     positioned relative to its point on the map.\r\n   * @observable\r\n   * @api\r\n   */\n  setPositioning(positioning) {\n    this.set(Property.POSITIONING, positioning);\n  }\n\n  /**\r\n   * Modify the visibility of the element.\r\n   * @param {boolean} visible Element visibility.\r\n   * @protected\r\n   */\n  setVisible(visible) {\n    if (this.rendered.visible !== visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.rendered.visible = visible;\n    }\n  }\n\n  /**\r\n   * Update pixel position.\r\n   * @protected\r\n   */\n  updatePixelPosition() {\n    const map = this.getMap();\n    const position = this.getPosition();\n    if (!map || !map.isRendered() || !position) {\n      this.setVisible(false);\n      return;\n    }\n    const pixel = map.getPixelFromCoordinate(position);\n    const mapSize = map.getSize();\n    this.updateRenderedPosition(pixel, mapSize);\n  }\n\n  /**\r\n   * @param {import(\"./pixel.js\").Pixel} pixel The pixel location.\r\n   * @param {import(\"./size.js\").Size|undefined} mapSize The map size.\r\n   * @protected\r\n   */\n  updateRenderedPosition(pixel, mapSize) {\n    const style = this.element.style;\n    const offset = this.getOffset();\n    const positioning = this.getPositioning();\n    this.setVisible(true);\n    const x = Math.round(pixel[0] + offset[0]) + 'px';\n    const y = Math.round(pixel[1] + offset[1]) + 'px';\n    let posX = '0%';\n    let posY = '0%';\n    if (positioning == 'bottom-right' || positioning == 'center-right' || positioning == 'top-right') {\n      posX = '-100%';\n    } else if (positioning == 'bottom-center' || positioning == 'center-center' || positioning == 'top-center') {\n      posX = '-50%';\n    }\n    if (positioning == 'bottom-left' || positioning == 'bottom-center' || positioning == 'bottom-right') {\n      posY = '-100%';\n    } else if (positioning == 'center-left' || positioning == 'center-center' || positioning == 'center-right') {\n      posY = '-50%';\n    }\n    const transform = `translate(${posX}, ${posY}) translate(${x}, ${y})`;\n    if (this.rendered.transform_ != transform) {\n      this.rendered.transform_ = transform;\n      style.transform = transform;\n    }\n  }\n\n  /**\r\n   * returns the options this Overlay has been created with\r\n   * @return {Options} overlay options\r\n   */\n  getOptions() {\n    return this.options;\n  }\n}\nexport default Overlay;"],
  "mappings": "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",
  "names": []
}
