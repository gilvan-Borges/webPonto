{
  "version": 3,
  "sources": ["../../../../../../node_modules/ol/source/TileEventType.js", "../../../../../../node_modules/ol/tilegrid/TileGrid.js", "../../../../../../node_modules/ol/tilegrid.js", "../../../../../../node_modules/ol/source/Tile.js", "../../../../../../node_modules/ol/uri.js", "../../../../../../node_modules/ol/tileurlfunction.js", "../../../../../../node_modules/ol/source/UrlTile.js", "../../../../../../node_modules/ol/source/TileImage.js", "../../../../../../node_modules/ol/source/XYZ.js", "../../../../../../node_modules/ol/source/OSM.js"],
  "sourcesContent": ["/**\r\n * @module ol/source/TileEventType\r\n */\n\n/**\r\n * @enum {string}\r\n */\nexport default {\n  /**\r\n   * Triggered when a tile starts loading.\r\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadstart\r\n   * @api\r\n   */\n  TILELOADSTART: 'tileloadstart',\n  /**\r\n   * Triggered when a tile finishes loading, either when its data is loaded,\r\n   * or when loading was aborted because the tile is no longer needed.\r\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadend\r\n   * @api\r\n   */\n  TILELOADEND: 'tileloadend',\n  /**\r\n   * Triggered if tile loading results in an error. Note that this is not the\r\n   * right place to re-fetch tiles. See {@link module:ol/ImageTile~ImageTile#load}\r\n   * for details.\r\n   * @event module:ol/source/Tile.TileSourceEvent#tileloaderror\r\n   * @api\r\n   */\n  TILELOADERROR: 'tileloaderror'\n};\n\n/**\r\n * @typedef {'tileloadstart'|'tileloadend'|'tileloaderror'} TileSourceEventTypes\r\n */", "/**\r\n * @module ol/tilegrid/TileGrid\r\n */\nimport TileRange, { createOrUpdate as createOrUpdateTileRange } from '../TileRange.js';\nimport { DEFAULT_TILE_SIZE } from './common.js';\nimport { assert } from '../asserts.js';\nimport { ceil, clamp, floor } from '../math.js';\nimport { createOrUpdate, getTopLeft } from '../extent.js';\nimport { createOrUpdate as createOrUpdateTileCoord } from '../tilecoord.js';\nimport { intersectsLinearRing } from '../geom/flat/intersectsextent.js';\nimport { isSorted, linearFindNearest } from '../array.js';\nimport { toSize } from '../size.js';\n\n/**\r\n * @private\r\n * @type {import(\"../tilecoord.js\").TileCoord}\r\n */\nconst tmpTileCoord = [0, 0, 0];\n\n/**\r\n * Number of decimal digits to consider in integer values when rounding.\r\n * @type {number}\r\n */\nconst DECIMALS = 5;\n\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles outside this\r\n * extent will be requested by {@link module:ol/source/Tile~TileSource} sources. When no `origin` or\r\n * `origins` are configured, the `origin` will be set to the top-left corner of the extent.\r\n * @property {number} [minZoom=0] Minimum zoom.\r\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e. where the `x`\r\n * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not\r\n * specified, `extent` or `origins` must be provided.\r\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins, i.e. where\r\n * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length\r\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\r\n * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or\r\n * `origin` must be provided.\r\n * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs\r\n * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions\r\n * array will have a length of `maxZoom + 1`.\r\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\r\n * of the grid for each zoom level. If specified the values\r\n * define each zoom level's extent together with the `origin` or `origins`.\r\n * A grid `extent` can be configured in addition, and will further limit the extent\r\n * for which tile requests are made by sources. If the bottom-left corner of\r\n * an extent is used as `origin` or `origins`, then the `y` value must be\r\n * negative because OpenLayers tile coordinates use the top left as the origin.\r\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\r\n * Default is `[256, 256]`.\r\n * @property {Array<number|import(\"../size.js\").Size>} [tileSizes] Tile sizes. If given, the array length\r\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\r\n * tile size.\r\n */\n\n/**\r\n * @classdesc\r\n * Base class for setting the grid pattern for sources accessing tiled-image\r\n * servers.\r\n * @api\r\n */\nclass TileGrid {\n  /**\r\n   * @param {Options} options Tile grid options.\r\n   */\n  constructor(options) {\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\n    this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;\n\n    /**\r\n     * @private\r\n     * @type {!Array<number>}\r\n     */\n    this.resolutions_ = options.resolutions;\n    assert(isSorted(this.resolutions_,\n    /**\r\n     * @param {number} a First resolution\r\n     * @param {number} b Second resolution\r\n     * @return {number} Comparison result\r\n     */\n    (a, b) => b - a, true), '`resolutions` must be sorted in descending order');\n\n    // check if we've got a consistent zoom factor and origin\n    let zoomFactor;\n    if (!options.origins) {\n      for (let i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {\n        if (!zoomFactor) {\n          zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];\n        } else {\n          if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {\n            zoomFactor = undefined;\n            break;\n          }\n        }\n      }\n    }\n\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\n    this.zoomFactor_ = zoomFactor;\n\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\n    this.maxZoom = this.resolutions_.length - 1;\n\n    /**\r\n     * @private\r\n     * @type {import(\"../coordinate.js\").Coordinate|null}\r\n     */\n    this.origin_ = options.origin !== undefined ? options.origin : null;\n\n    /**\r\n     * @private\r\n     * @type {Array<import(\"../coordinate.js\").Coordinate>}\r\n     */\n    this.origins_ = null;\n    if (options.origins !== undefined) {\n      this.origins_ = options.origins;\n      assert(this.origins_.length == this.resolutions_.length, 'Number of `origins` and `resolutions` must be equal');\n    }\n    const extent = options.extent;\n    if (extent !== undefined && !this.origin_ && !this.origins_) {\n      this.origin_ = getTopLeft(extent);\n    }\n    assert(!this.origin_ && this.origins_ || this.origin_ && !this.origins_, 'Either `origin` or `origins` must be configured, never both');\n\n    /**\r\n     * @private\r\n     * @type {Array<number|import(\"../size.js\").Size>}\r\n     */\n    this.tileSizes_ = null;\n    if (options.tileSizes !== undefined) {\n      this.tileSizes_ = options.tileSizes;\n      assert(this.tileSizes_.length == this.resolutions_.length, 'Number of `tileSizes` and `resolutions` must be equal');\n    }\n\n    /**\r\n     * @private\r\n     * @type {number|import(\"../size.js\").Size}\r\n     */\n    this.tileSize_ = options.tileSize !== undefined ? options.tileSize : !this.tileSizes_ ? DEFAULT_TILE_SIZE : null;\n    assert(!this.tileSize_ && this.tileSizes_ || this.tileSize_ && !this.tileSizes_, 'Either `tileSize` or `tileSizes` must be configured, never both');\n\n    /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */\n    this.extent_ = extent !== undefined ? extent : null;\n\n    /**\r\n     * @private\r\n     * @type {Array<import(\"../TileRange.js\").default>}\r\n     */\n    this.fullTileRanges_ = null;\n\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */\n    this.tmpSize_ = [0, 0];\n\n    /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */\n    this.tmpExtent_ = [0, 0, 0, 0];\n    if (options.sizes !== undefined) {\n      this.fullTileRanges_ = options.sizes.map((size, z) => {\n        const tileRange = new TileRange(Math.min(0, size[0]), Math.max(size[0] - 1, -1), Math.min(0, size[1]), Math.max(size[1] - 1, -1));\n        if (extent) {\n          const restrictedTileRange = this.getTileRangeForExtentAndZ(extent, z);\n          tileRange.minX = Math.max(restrictedTileRange.minX, tileRange.minX);\n          tileRange.maxX = Math.min(restrictedTileRange.maxX, tileRange.maxX);\n          tileRange.minY = Math.max(restrictedTileRange.minY, tileRange.minY);\n          tileRange.maxY = Math.min(restrictedTileRange.maxY, tileRange.maxY);\n        }\n        return tileRange;\n      });\n    } else if (extent) {\n      this.calculateTileRanges_(extent);\n    }\n  }\n\n  /**\r\n   * Call a function with each tile coordinate for a given extent and zoom level.\r\n   *\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} zoom Integer zoom level.\r\n   * @param {function(import(\"../tilecoord.js\").TileCoord): void} callback Function called with each tile coordinate.\r\n   * @api\r\n   */\n  forEachTileCoord(extent, zoom, callback) {\n    const tileRange = this.getTileRangeForExtentAndZ(extent, zoom);\n    for (let i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {\n      for (let j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {\n        callback([zoom, i, j]);\n      }\n    }\n  }\n\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {function(number, import(\"../TileRange.js\").default): boolean} callback Callback.\r\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\r\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary import(\"../extent.js\").Extent object.\r\n   * @return {boolean} Callback succeeded.\r\n   */\n  forEachTileCoordParentTileRange(tileCoord, callback, tempTileRange, tempExtent) {\n    let tileRange, x, y;\n    let tileCoordExtent = null;\n    let z = tileCoord[0] - 1;\n    if (this.zoomFactor_ === 2) {\n      x = tileCoord[1];\n      y = tileCoord[2];\n    } else {\n      tileCoordExtent = this.getTileCoordExtent(tileCoord, tempExtent);\n    }\n    while (z >= this.minZoom) {\n      if (x !== undefined && y !== undefined) {\n        x = Math.floor(x / 2);\n        y = Math.floor(y / 2);\n        tileRange = createOrUpdateTileRange(x, x, y, y, tempTileRange);\n      } else {\n        tileRange = this.getTileRangeForExtentAndZ(tileCoordExtent, z, tempTileRange);\n      }\n      if (callback(z, tileRange)) {\n        return true;\n      }\n      --z;\n    }\n    return false;\n  }\n\n  /**\r\n   * Get the extent for this tile grid, if it was configured.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   * @api\r\n   */\n  getExtent() {\n    return this.extent_;\n  }\n\n  /**\r\n   * Get the maximum zoom level for the grid.\r\n   * @return {number} Max zoom.\r\n   * @api\r\n   */\n  getMaxZoom() {\n    return this.maxZoom;\n  }\n\n  /**\r\n   * Get the minimum zoom level for the grid.\r\n   * @return {number} Min zoom.\r\n   * @api\r\n   */\n  getMinZoom() {\n    return this.minZoom;\n  }\n\n  /**\r\n   * Get the origin for the grid at the given zoom level.\r\n   * @param {number} z Integer zoom level.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Origin.\r\n   * @api\r\n   */\n  getOrigin(z) {\n    if (this.origin_) {\n      return this.origin_;\n    }\n    return this.origins_[z];\n  }\n\n  /**\r\n   * Get the resolution for the given zoom level.\r\n   * @param {number} z Integer zoom level.\r\n   * @return {number} Resolution.\r\n   * @api\r\n   */\n  getResolution(z) {\n    return this.resolutions_[z];\n  }\n\n  /**\r\n   * Get the list of resolutions for the tile grid.\r\n   * @return {Array<number>} Resolutions.\r\n   * @api\r\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\r\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary import(\"../extent.js\").Extent object.\r\n   * @return {import(\"../TileRange.js\").default|null} Tile range.\r\n   */\n  getTileCoordChildTileRange(tileCoord, tempTileRange, tempExtent) {\n    if (tileCoord[0] < this.maxZoom) {\n      if (this.zoomFactor_ === 2) {\n        const minX = tileCoord[1] * 2;\n        const minY = tileCoord[2] * 2;\n        return createOrUpdateTileRange(minX, minX + 1, minY, minY + 1, tempTileRange);\n      }\n      const tileCoordExtent = this.getTileCoordExtent(tileCoord, tempExtent || this.tmpExtent_);\n      return this.getTileRangeForExtentAndZ(tileCoordExtent, tileCoord[0] + 1, tempTileRange);\n    }\n    return null;\n  }\n\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {number} z Integer zoom level.\r\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\r\n   * @return {import(\"../TileRange.js\").default|null} Tile range.\r\n   */\n  getTileRangeForTileCoordAndZ(tileCoord, z, tempTileRange) {\n    if (z > this.maxZoom || z < this.minZoom) {\n      return null;\n    }\n    const tileCoordZ = tileCoord[0];\n    const tileCoordX = tileCoord[1];\n    const tileCoordY = tileCoord[2];\n    if (z === tileCoordZ) {\n      return createOrUpdateTileRange(tileCoordX, tileCoordY, tileCoordX, tileCoordY, tempTileRange);\n    }\n    if (this.zoomFactor_) {\n      const factor = Math.pow(this.zoomFactor_, z - tileCoordZ);\n      const minX = Math.floor(tileCoordX * factor);\n      const minY = Math.floor(tileCoordY * factor);\n      if (z < tileCoordZ) {\n        return createOrUpdateTileRange(minX, minX, minY, minY, tempTileRange);\n      }\n      const maxX = Math.floor(factor * (tileCoordX + 1)) - 1;\n      const maxY = Math.floor(factor * (tileCoordY + 1)) - 1;\n      return createOrUpdateTileRange(minX, maxX, minY, maxY, tempTileRange);\n    }\n    const tileCoordExtent = this.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    return this.getTileRangeForExtentAndZ(tileCoordExtent, z, tempTileRange);\n  }\n\n  /**\r\n   * Get a tile range for the given extent and integer zoom level.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} z Integer zoom level.\r\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary tile range object.\r\n   * @return {import(\"../TileRange.js\").default} Tile range.\r\n   */\n  getTileRangeForExtentAndZ(extent, z, tempTileRange) {\n    this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, tmpTileCoord);\n    const minX = tmpTileCoord[1];\n    const minY = tmpTileCoord[2];\n    this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, tmpTileCoord);\n    const maxX = tmpTileCoord[1];\n    const maxY = tmpTileCoord[2];\n    return createOrUpdateTileRange(minX, maxX, minY, maxY, tempTileRange);\n  }\n\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Tile center.\r\n   */\n  getTileCoordCenter(tileCoord) {\n    const origin = this.getOrigin(tileCoord[0]);\n    const resolution = this.getResolution(tileCoord[0]);\n    const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n    return [origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution, origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution];\n  }\n\n  /**\r\n   * Get the extent of a tile coordinate.\r\n   *\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary extent object.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   * @api\r\n   */\n  getTileCoordExtent(tileCoord, tempExtent) {\n    const origin = this.getOrigin(tileCoord[0]);\n    const resolution = this.getResolution(tileCoord[0]);\n    const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n    const minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;\n    const minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;\n    const maxX = minX + tileSize[0] * resolution;\n    const maxY = minY + tileSize[1] * resolution;\n    return createOrUpdate(minX, minY, maxX, maxY, tempExtent);\n  }\n\n  /**\r\n   * Get the tile coordinate for the given map coordinate and resolution.  This\r\n   * method considers that coordinates that intersect tile boundaries should be\r\n   * assigned the higher tile coordinate.\r\n   *\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {number} resolution Resolution.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\r\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\r\n   * @api\r\n   */\n  getTileCoordForCoordAndResolution(coordinate, resolution, opt_tileCoord) {\n    return this.getTileCoordForXYAndResolution_(coordinate[0], coordinate[1], resolution, false, opt_tileCoord);\n  }\n\n  /**\r\n   * Note that this method should not be called for resolutions that correspond\r\n   * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {number} resolution Resolution (for a non-integer zoom level).\r\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\r\n   *     intersections go to the higher tile coordinate, let edge intersections\r\n   *     go to the lower tile coordinate.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\r\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\r\n   * @private\r\n   */\n  getTileCoordForXYAndResolution_(x, y, resolution, reverseIntersectionPolicy, opt_tileCoord) {\n    const z = this.getZForResolution(resolution);\n    const scale = resolution / this.getResolution(z);\n    const origin = this.getOrigin(z);\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n    let tileCoordX = scale * (x - origin[0]) / resolution / tileSize[0];\n    let tileCoordY = scale * (origin[1] - y) / resolution / tileSize[1];\n    if (reverseIntersectionPolicy) {\n      tileCoordX = ceil(tileCoordX, DECIMALS) - 1;\n      tileCoordY = ceil(tileCoordY, DECIMALS) - 1;\n    } else {\n      tileCoordX = floor(tileCoordX, DECIMALS);\n      tileCoordY = floor(tileCoordY, DECIMALS);\n    }\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n  }\n\n  /**\r\n   * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,\r\n   * they should have separate implementations.  This method is for integer zoom\r\n   * levels.  The other method should only be called for resolutions corresponding\r\n   * to non-integer zoom levels.\r\n   * @param {number} x Map x coordinate.\r\n   * @param {number} y Map y coordinate.\r\n   * @param {number} z Integer zoom level.\r\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\r\n   *     intersections go to the higher tile coordinate, let edge intersections\r\n   *     go to the lower tile coordinate.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\r\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\r\n   * @private\r\n   */\n  getTileCoordForXYAndZ_(x, y, z, reverseIntersectionPolicy, opt_tileCoord) {\n    const origin = this.getOrigin(z);\n    const resolution = this.getResolution(z);\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n    let tileCoordX = (x - origin[0]) / resolution / tileSize[0];\n    let tileCoordY = (origin[1] - y) / resolution / tileSize[1];\n    if (reverseIntersectionPolicy) {\n      tileCoordX = ceil(tileCoordX, DECIMALS) - 1;\n      tileCoordY = ceil(tileCoordY, DECIMALS) - 1;\n    } else {\n      tileCoordX = floor(tileCoordX, DECIMALS);\n      tileCoordY = floor(tileCoordY, DECIMALS);\n    }\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n  }\n\n  /**\r\n   * Get a tile coordinate given a map coordinate and zoom level.\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {number} z Integer zoom level, e.g. the result of a `getZForResolution()` method call\r\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\r\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\r\n   * @api\r\n   */\n  getTileCoordForCoordAndZ(coordinate, z, opt_tileCoord) {\n    return this.getTileCoordForXYAndZ_(coordinate[0], coordinate[1], z, false, opt_tileCoord);\n  }\n\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @return {number} Tile resolution.\r\n   */\n  getTileCoordResolution(tileCoord) {\n    return this.resolutions_[tileCoord[0]];\n  }\n\n  /**\r\n   * Get the tile size for a zoom level. The type of the return value matches the\r\n   * `tileSize` or `tileSizes` that the tile grid was configured with. To always\r\n   * get an {@link import(\"../size.js\").Size}, run the result through {@link module:ol/size.toSize}.\r\n   * @param {number} z Z.\r\n   * @return {number|import(\"../size.js\").Size} Tile size.\r\n   * @api\r\n   */\n  getTileSize(z) {\n    if (this.tileSize_) {\n      return this.tileSize_;\n    }\n    return this.tileSizes_[z];\n  }\n\n  /**\r\n   * @param {number} z Zoom level.\r\n   * @return {import(\"../TileRange.js\").default|null} Extent tile range for the specified zoom level.\r\n   */\n  getFullTileRange(z) {\n    if (!this.fullTileRanges_) {\n      return this.extent_ ? this.getTileRangeForExtentAndZ(this.extent_, z) : null;\n    }\n    return this.fullTileRanges_[z];\n  }\n\n  /**\r\n   * @param {number} resolution Resolution.\r\n   * @param {number|import(\"../array.js\").NearestDirectionFunction} [opt_direction]\r\n   *     If 0, the nearest resolution will be used.\r\n   *     If 1, the nearest higher resolution (lower Z) will be used. If -1, the\r\n   *     nearest lower resolution (higher Z) will be used. Default is 0.\r\n   *     Use a {@link module:ol/array~NearestDirectionFunction} for more precise control.\r\n   *\r\n   * For example to change tile Z at the midpoint of zoom levels\r\n   * ```js\r\n   * function(value, high, low) {\r\n   *   return value - low * Math.sqrt(high / low);\r\n   * }\r\n   * ```\r\n   * @return {number} Z.\r\n   * @api\r\n   */\n  getZForResolution(resolution, opt_direction) {\n    const z = linearFindNearest(this.resolutions_, resolution, opt_direction || 0);\n    return clamp(z, this.minZoom, this.maxZoom);\n  }\n\n  /**\r\n   * The tile with the provided tile coordinate intersects the given viewport.\r\n   * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coordinate.\r\n   * @param {Array<number>} viewport Viewport as returned from {@link module:ol/extent.getRotatedViewport}.\r\n   * @return {boolean} The tile with the provided tile coordinate intersects the given viewport.\r\n   */\n  tileCoordIntersectsViewport(tileCoord, viewport) {\n    return intersectsLinearRing(viewport, 0, viewport.length, 2, this.getTileCoordExtent(tileCoord));\n  }\n\n  /**\r\n   * @param {!import(\"../extent.js\").Extent} extent Extent for this tile grid.\r\n   * @private\r\n   */\n  calculateTileRanges_(extent) {\n    const length = this.resolutions_.length;\n    const fullTileRanges = new Array(length);\n    for (let z = this.minZoom; z < length; ++z) {\n      fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);\n    }\n    this.fullTileRanges_ = fullTileRanges;\n  }\n}\nexport default TileGrid;", "/**\r\n * @module ol/tilegrid\r\n */\nimport TileGrid from './tilegrid/TileGrid.js';\nimport { DEFAULT_MAX_ZOOM, DEFAULT_TILE_SIZE } from './tilegrid/common.js';\nimport { METERS_PER_UNIT, get as getProjection } from './proj.js';\nimport { containsCoordinate, createOrUpdate, getCorner, getHeight, getWidth } from './extent.js';\nimport { toSize } from './size.js';\nexport { TileGrid };\nexport { default as WMTS } from './tilegrid/WMTS.js';\n\n/**\r\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n * @return {!TileGrid} Default tile grid for the\r\n * passed projection.\r\n */\nexport function getForProjection(projection) {\n  let tileGrid = projection.getDefaultTileGrid();\n  if (!tileGrid) {\n    tileGrid = createForProjection(projection);\n    projection.setDefaultTileGrid(tileGrid);\n  }\n  return tileGrid;\n}\n\n/**\r\n * @param {TileGrid} tileGrid Tile grid.\r\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n * @return {import(\"./tilecoord.js\").TileCoord} Tile coordinate.\r\n */\nexport function wrapX(tileGrid, tileCoord, projection) {\n  const z = tileCoord[0];\n  const center = tileGrid.getTileCoordCenter(tileCoord);\n  const projectionExtent = extentFromProjection(projection);\n  if (!containsCoordinate(projectionExtent, center)) {\n    const worldWidth = getWidth(projectionExtent);\n    const worldsAway = Math.ceil((projectionExtent[0] - center[0]) / worldWidth);\n    center[0] += worldWidth * worldsAway;\n    return tileGrid.getTileCoordForCoordAndZ(center, z);\n  }\n  return tileCoord;\n}\n\n/**\r\n * @param {import(\"./extent.js\").Extent} extent Extent.\r\n * @param {number} [maxZoom] Maximum zoom level (default is\r\n *     DEFAULT_MAX_ZOOM).\r\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\r\n *     DEFAULT_TILE_SIZE).\r\n * @param {import(\"./extent.js\").Corner} [corner] Extent corner (default is `'top-left'`).\r\n * @return {!TileGrid} TileGrid instance.\r\n */\nexport function createForExtent(extent, maxZoom, tileSize, corner) {\n  corner = corner !== undefined ? corner : 'top-left';\n  const resolutions = resolutionsFromExtent(extent, maxZoom, tileSize);\n  return new TileGrid({\n    extent: extent,\n    origin: getCorner(extent, corner),\n    resolutions: resolutions,\n    tileSize: tileSize\n  });\n}\n\n/**\r\n * @typedef {Object} XYZOptions\r\n * @property {import(\"./extent.js\").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the\r\n * top-left corner of the extent. If `maxResolution` is not provided the zero level of the grid is defined by the resolution\r\n * at which one tile fits in the provided extent. If not provided, the extent of the EPSG:3857 projection is used.\r\n * @property {number} [maxResolution] Resolution at level zero.\r\n * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels\r\n * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.\r\n * @property {number} [minZoom=0] Minimum zoom.\r\n * @property {number|import(\"./size.js\").Size} [tileSize=[256, 256]] Tile size in pixels.\r\n */\n\n/**\r\n * Creates a tile grid with a standard XYZ tiling scheme.\r\n * @param {XYZOptions} [options] Tile grid options.\r\n * @return {!TileGrid} Tile grid instance.\r\n * @api\r\n */\nexport function createXYZ(options) {\n  const xyzOptions = options || {};\n  const extent = xyzOptions.extent || getProjection('EPSG:3857').getExtent();\n  const gridOptions = {\n    extent: extent,\n    minZoom: xyzOptions.minZoom,\n    tileSize: xyzOptions.tileSize,\n    resolutions: resolutionsFromExtent(extent, xyzOptions.maxZoom, xyzOptions.tileSize, xyzOptions.maxResolution)\n  };\n  return new TileGrid(gridOptions);\n}\n\n/**\r\n * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.\r\n * @param {import(\"./extent.js\").Extent} extent Extent.\r\n * @param {number} [maxZoom] Maximum zoom level (default is\r\n *     DEFAULT_MAX_ZOOM).\r\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\r\n *     DEFAULT_TILE_SIZE).\r\n * @param {number} [maxResolution] Resolution at level zero.\r\n * @return {!Array<number>} Resolutions array.\r\n */\nfunction resolutionsFromExtent(extent, maxZoom, tileSize, maxResolution) {\n  maxZoom = maxZoom !== undefined ? maxZoom : DEFAULT_MAX_ZOOM;\n  tileSize = toSize(tileSize !== undefined ? tileSize : DEFAULT_TILE_SIZE);\n  const height = getHeight(extent);\n  const width = getWidth(extent);\n  maxResolution = maxResolution > 0 ? maxResolution : Math.max(width / tileSize[0], height / tileSize[1]);\n  const length = maxZoom + 1;\n  const resolutions = new Array(length);\n  for (let z = 0; z < length; ++z) {\n    resolutions[z] = maxResolution / Math.pow(2, z);\n  }\n  return resolutions;\n}\n\n/**\r\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\r\n * @param {number} [maxZoom] Maximum zoom level (default is\r\n *     DEFAULT_MAX_ZOOM).\r\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\r\n *     DEFAULT_TILE_SIZE).\r\n * @param {import(\"./extent.js\").Corner} [corner] Extent corner (default is `'top-left'`).\r\n * @return {!TileGrid} TileGrid instance.\r\n */\nexport function createForProjection(projection, maxZoom, tileSize, corner) {\n  const extent = extentFromProjection(projection);\n  return createForExtent(extent, maxZoom, tileSize, corner);\n}\n\n/**\r\n * Generate a tile grid extent from a projection.  If the projection has an\r\n * extent, it is used.  If not, a global extent is assumed.\r\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\r\n * @return {import(\"./extent.js\").Extent} Extent.\r\n */\nexport function extentFromProjection(projection) {\n  projection = getProjection(projection);\n  let extent = projection.getExtent();\n  if (!extent) {\n    const half = 180 * METERS_PER_UNIT.degrees / projection.getMetersPerUnit();\n    extent = createOrUpdate(-half, -half, half, half);\n  }\n  return extent;\n}", "/**\r\n * @module ol/source/Tile\r\n */\nimport Event from '../events/Event.js';\nimport Source from './Source.js';\nimport { abstract, getUid } from '../util.js';\nimport { getForProjection as getTileGridForProjection, wrapX } from '../tilegrid.js';\nimport { scale as scaleSize, toSize } from '../size.js';\nimport { withinExtentAndZ } from '../tilecoord.js';\n\n/***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"./TileEventType\").TileSourceEventTypes, TileSourceEvent, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\r\n *     import(\"./TileEventType\").TileSourceEventTypes, Return>} TileSourceOnSignature\r\n */\n\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\r\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\r\n * @property {number} [tilePixelRatio] TilePixelRatio.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\r\n * @property {import(\"./Source.js\").State} [state] State.\r\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\r\n * @property {boolean} [wrapX=false] WrapX.\r\n * @property {number} [transition] Transition.\r\n * @property {string} [key] Key.\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\r\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\r\n * the nearest neighbor is used when resampling.\r\n */\n\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for sources providing images divided into a tile grid.\r\n *\r\n * @template {import(\"../Tile.js\").default} [TileType=import(\"../Tile.js\").default]\r\n * @abstract\r\n * @api\r\n */\nclass TileSource extends Source {\n  /**\r\n   * @param {Options} options SourceTile source options.\r\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      projection: options.projection,\n      state: options.state,\n      wrapX: options.wrapX,\n      interpolate: options.interpolate\n    });\n\n    /***\r\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\r\n     */\n    this.on;\n\n    /***\r\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\r\n     */\n    this.once;\n\n    /***\r\n     * @type {TileSourceOnSignature<void>}\r\n     */\n    this.un;\n\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\n    this.tilePixelRatio_ = options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;\n\n    /**\r\n     * @type {import(\"../tilegrid/TileGrid.js\").default|null}\r\n     * @protected\r\n     */\n    this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\n    const tileSize = [256, 256];\n    if (this.tileGrid) {\n      toSize(this.tileGrid.getTileSize(this.tileGrid.getMinZoom()), tileSize);\n    }\n\n    /**\r\n     * @protected\r\n     * @type {import(\"../size.js\").Size}\r\n     */\n    this.tmpSize = [0, 0];\n\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\n    this.key_ = options.key || getUid(this);\n\n    /**\r\n     * @protected\r\n     * @type {import(\"../Tile.js\").Options}\r\n     */\n    this.tileOptions = {\n      transition: options.transition,\n      interpolate: options.interpolate\n    };\n\n    /**\r\n     * zDirection hint, read by the renderer. Indicates which resolution should be used\r\n     * by a renderer if the views resolution does not match any resolution of the tile source.\r\n     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\r\n     * will be used. If -1, the nearest higher resolution will be used.\r\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\r\n     */\n    this.zDirection = options.zDirection ? options.zDirection : 0;\n  }\n\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {number} Gutter.\r\n   */\n  getGutterForProjection(projection) {\n    return 0;\n  }\n\n  /**\r\n   * Return the key to be used for all tiles in the source.\r\n   * @return {string} The key for all tiles.\r\n   */\n  getKey() {\n    return this.key_;\n  }\n\n  /**\r\n   * Set the value to be used as the key for all tiles in the source.\r\n   * @param {string} key The key for tiles.\r\n   * @protected\r\n   */\n  setKey(key) {\n    if (this.key_ !== key) {\n      this.key_ = key;\n      this.changed();\n    }\n  }\n\n  /**\r\n   * @param {import(\"../proj/Projection\").default} [projection] Projection.\r\n   * @return {Array<number>|null} Resolutions.\r\n   * @override\r\n   */\n  getResolutions(projection) {\n    const tileGrid = projection ? this.getTileGridForProjection(projection) : this.tileGrid;\n    if (!tileGrid) {\n      return null;\n    }\n    return tileGrid.getResolutions();\n  }\n\n  /**\r\n   * @abstract\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {TileType|null} Tile.\r\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    return abstract();\n  }\n\n  /**\r\n   * Return the tile grid of the tile source.\r\n   * @return {import(\"../tilegrid/TileGrid.js\").default|null} Tile grid.\r\n   * @api\r\n   */\n  getTileGrid() {\n    return this.tileGrid;\n  }\n\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\r\n   */\n  getTileGridForProjection(projection) {\n    if (!this.tileGrid) {\n      return getTileGridForProjection(projection);\n    }\n    return this.tileGrid;\n  }\n\n  /**\r\n   * Get the tile pixel ratio for this source. Subclasses may override this\r\n   * method, which is meant to return a supported pixel ratio that matches the\r\n   * provided `pixelRatio` as close as possible.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {number} Tile pixel ratio.\r\n   */\n  getTilePixelRatio(pixelRatio) {\n    return this.tilePixelRatio_;\n  }\n\n  /**\r\n   * @param {number} z Z.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {import(\"../size.js\").Size} Tile size.\r\n   */\n  getTilePixelSize(z, pixelRatio, projection) {\n    const tileGrid = this.getTileGridForProjection(projection);\n    const tilePixelRatio = this.getTilePixelRatio(pixelRatio);\n    const tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n    if (tilePixelRatio == 1) {\n      return tileSize;\n    }\n    return scaleSize(tileSize, tilePixelRatio, this.tmpSize);\n  }\n\n  /**\r\n   * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\r\n   * is outside the resolution and extent range of the tile grid, `null` will be\r\n   * returned.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"../proj/Projection.js\").default} [projection] Projection.\r\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate to be passed to the tileUrlFunction or\r\n   *     null if no tile URL should be created for the passed `tileCoord`.\r\n   */\n  getTileCoordForTileUrlFunction(tileCoord, projection) {\n    const gridProjection = projection !== undefined ? projection : this.getProjection();\n    const tileGrid = projection !== undefined ? this.getTileGridForProjection(gridProjection) : this.tileGrid || this.getTileGridForProjection(gridProjection);\n    if (this.getWrapX() && gridProjection.isGlobal()) {\n      tileCoord = wrapX(tileGrid, tileCoord, gridProjection);\n    }\n    return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;\n  }\n\n  /**\r\n   * Remove all cached reprojected tiles from the source. The next render cycle will create new tiles.\r\n   * @api\r\n   */\n  clear() {}\n\n  /**\r\n   * @override\r\n   */\n  refresh() {\n    this.clear();\n    super.refresh();\n  }\n}\n\n/**\r\n * @classdesc\r\n * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this\r\n * type.\r\n */\nexport class TileSourceEvent extends Event {\n  /**\r\n   * @param {string} type Type.\r\n   * @param {import(\"../Tile.js\").default} tile The tile.\r\n   */\n  constructor(type, tile) {\n    super(type);\n\n    /**\r\n     * The tile related to the event.\r\n     * @type {import(\"../Tile.js\").default}\r\n     * @api\r\n     */\n    this.tile = tile;\n  }\n}\nexport default TileSource;", "/**\r\n * @module ol/uri\r\n */\n\nimport { hashZXY } from './tilecoord.js';\nimport { modulo } from './math.js';\n\n/**\r\n * Appends query parameters to a URI.\r\n *\r\n * @param {string} uri The original URI, which may already have query data.\r\n * @param {!Object} params An object where keys are URI-encoded parameter keys,\r\n *     and the values are arbitrary types or arrays.\r\n * @return {string} The new URI.\r\n */\nexport function appendParams(uri, params) {\n  /** @type {Array<string>} */\n  const keyParams = [];\n  // Skip any null or undefined parameter values\n  Object.keys(params).forEach(function (k) {\n    if (params[k] !== null && params[k] !== undefined) {\n      keyParams.push(k + '=' + encodeURIComponent(params[k]));\n    }\n  });\n  const qs = keyParams.join('&');\n  // remove any trailing ? or &\n  uri = uri.replace(/[?&]$/, '');\n  // append ? or & depending on whether uri has existing parameters\n  uri += uri.includes('?') ? '&' : '?';\n  return uri + qs;\n}\nconst zRegEx = /\\{z\\}/g;\nconst xRegEx = /\\{x\\}/g;\nconst yRegEx = /\\{y\\}/g;\nconst dashYRegEx = /\\{-y\\}/g;\n\n/**\r\n * @param {string} template The URL template.  Should have `{x}`, `{y}`, and `{z}` placeholders.  If\r\n * the template has a `{-y}` placeholder, the `maxY` parameter must be supplied.\r\n * @param {number} z The tile z coordinate.\r\n * @param {number} x The tile x coordinate.\r\n * @param {number} y The tile y coordinate.\r\n * @param {number} [maxY] The maximum y coordinate at the given z level.\r\n * @return {string} The URL.\r\n */\nexport function renderXYZTemplate(template, z, x, y, maxY) {\n  return template.replace(zRegEx, z.toString()).replace(xRegEx, x.toString()).replace(yRegEx, y.toString()).replace(dashYRegEx, function () {\n    if (maxY === undefined) {\n      throw new Error('If the URL template has a {-y} placeholder, the grid extent must be known');\n    }\n    return (maxY - y).toString();\n  });\n}\n\n/**\r\n * @param {Array<string>} urls List of URLs.\r\n * @param {number} z The tile z coordinate.\r\n * @param {number} x The tile x coordinate.\r\n * @param {number} y The tile y coordinate.\r\n * @return {string} The chosen URL.\r\n */\nexport function pickUrl(urls, z, x, y) {\n  const hash = hashZXY(z, x, y);\n  const index = modulo(hash, urls.length);\n  return urls[index];\n}\n\n/**\r\n * @param {string} url URL.\r\n * @return {Array<string>} Array of urls.\r\n */\nexport function expandUrl(url) {\n  const urls = [];\n  let match = /\\{([a-z])-([a-z])\\}/.exec(url);\n  if (match) {\n    // char range\n    const startCharCode = match[1].charCodeAt(0);\n    const stopCharCode = match[2].charCodeAt(0);\n    let charCode;\n    for (charCode = startCharCode; charCode <= stopCharCode; ++charCode) {\n      urls.push(url.replace(match[0], String.fromCharCode(charCode)));\n    }\n    return urls;\n  }\n  match = /\\{(\\d+)-(\\d+)\\}/.exec(url);\n  if (match) {\n    // number range\n    const stop = parseInt(match[2], 10);\n    for (let i = parseInt(match[1], 10); i <= stop; i++) {\n      urls.push(url.replace(match[0], i.toString()));\n    }\n    return urls;\n  }\n  urls.push(url);\n  return urls;\n}", "/**\r\n * @module ol/tileurlfunction\r\n */\nimport { modulo } from './math.js';\nimport { renderXYZTemplate } from './uri.js';\nimport { hash as tileCoordHash } from './tilecoord.js';\n\n/**\r\n * @param {string} template Template.\r\n * @param {import(\"./tilegrid/TileGrid.js\").default|null} tileGrid Tile grid.\r\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\r\n */\nexport function createFromTemplate(template, tileGrid) {\n  return (\n    /**\r\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\r\n     * @param {number} pixelRatio Pixel ratio.\r\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n     * @return {string|undefined} Tile URL.\r\n     */\n    function (tileCoord, pixelRatio, projection) {\n      if (!tileCoord) {\n        return undefined;\n      }\n      let maxY;\n      const z = tileCoord[0];\n      if (tileGrid) {\n        // The `{-y}` placeholder only works for sources that have a tile grid at construction\n        const range = tileGrid.getFullTileRange(z);\n        if (range) {\n          maxY = range.getHeight() - 1;\n        }\n      }\n      return renderXYZTemplate(template, z, tileCoord[1], tileCoord[2], maxY);\n    }\n  );\n}\n\n/**\r\n * @param {Array<string>} templates Templates.\r\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\r\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\r\n */\nexport function createFromTemplates(templates, tileGrid) {\n  const len = templates.length;\n  const tileUrlFunctions = new Array(len);\n  for (let i = 0; i < len; ++i) {\n    tileUrlFunctions[i] = createFromTemplate(templates[i], tileGrid);\n  }\n  return createFromTileUrlFunctions(tileUrlFunctions);\n}\n\n/**\r\n * @param {Array<import(\"./Tile.js\").UrlFunction>} tileUrlFunctions Tile URL Functions.\r\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\r\n */\nexport function createFromTileUrlFunctions(tileUrlFunctions) {\n  if (tileUrlFunctions.length === 1) {\n    return tileUrlFunctions[0];\n  }\n  return (\n    /**\r\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\r\n     * @param {number} pixelRatio Pixel ratio.\r\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n     * @return {string|undefined} Tile URL.\r\n     */\n    function (tileCoord, pixelRatio, projection) {\n      if (!tileCoord) {\n        return undefined;\n      }\n      const h = tileCoordHash(tileCoord);\n      const index = modulo(h, tileUrlFunctions.length);\n      return tileUrlFunctions[index](tileCoord, pixelRatio, projection);\n    }\n  );\n}\n\n/**\r\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n * @param {number} pixelRatio Pixel ratio.\r\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n * @return {string|undefined} Tile URL.\r\n */\nexport function nullTileUrlFunction(tileCoord, pixelRatio, projection) {\n  return undefined;\n}\n\n/**\r\n * TODO: Update ol-mapbox-style to import this from the uri.js module.\r\n */\nexport { expandUrl } from './uri.js';", "/**\r\n * @module ol/source/UrlTile\r\n */\nimport TileEventType from './TileEventType.js';\nimport TileSource, { TileSourceEvent } from './Tile.js';\nimport TileState from '../TileState.js';\nimport { createFromTemplates } from '../tileurlfunction.js';\nimport { expandUrl } from '../uri.js';\nimport { getUid } from '../util.js';\n\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\r\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\r\n * @property {import(\"./Source.js\").State} [state] State.\r\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\r\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction TileLoadFunction.\r\n * @property {number} [tilePixelRatio] TilePixelRatio.\r\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function\r\n * for the url option instead.\r\n * @property {string} [url] Url.\r\n * @property {Array<string>} [urls] Urls.\r\n * @property {boolean} [wrapX=true] WrapX.\r\n * @property {number} [transition] Transition.\r\n * @property {string} [key] Key.\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\r\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\r\n * the nearest neighbor is used when resampling.\r\n */\n\n/**\r\n * @deprecated Use the ol/source/ImageTile.js instead.\r\n *\r\n * @fires import(\"./Tile.js\").TileSourceEvent\r\n */\nclass UrlTile extends TileSource {\n  /**\r\n   * @param {Options} options Image tile options.\r\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection\n    });\n\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\n    this.generateTileUrlFunction_ = this.tileUrlFunction === UrlTile.prototype.tileUrlFunction;\n\n    /**\r\n     * @protected\r\n     * @type {import(\"../Tile.js\").LoadFunction}\r\n     */\n    this.tileLoadFunction = options.tileLoadFunction;\n    if (options.tileUrlFunction) {\n      this.tileUrlFunction = options.tileUrlFunction;\n    }\n\n    /**\r\n     * @protected\r\n     * @type {!Array<string>|null}\r\n     */\n    this.urls = null;\n    if (options.urls) {\n      this.setUrls(options.urls);\n    } else if (options.url) {\n      this.setUrl(options.url);\n    }\n\n    /**\r\n     * @private\r\n     * @type {!Object<string, boolean>}\r\n     */\n    this.tileLoadingKeys_ = {};\n  }\n\n  /**\r\n   * Deprecated.  Use an ImageTile source instead.\r\n   * Return the tile load function of the source.\r\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\r\n   * @api\r\n   */\n  getTileLoadFunction() {\n    return this.tileLoadFunction;\n  }\n\n  /**\r\n   * Deprecated.  Use an ImageTile source instead.\r\n   * Return the tile URL function of the source.\r\n   * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\r\n   * @api\r\n   */\n  getTileUrlFunction() {\n    return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction ? this.tileUrlFunction.bind(this) : this.tileUrlFunction;\n  }\n\n  /**\r\n   * Deprecated.  Use an ImageTile source instead.\r\n   * Return the URLs used for this source.\r\n   * When a tileUrlFunction is used instead of url or urls,\r\n   * null will be returned.\r\n   * @return {!Array<string>|null} URLs.\r\n   * @api\r\n   */\n  getUrls() {\n    return this.urls;\n  }\n\n  /**\r\n   * Handle tile change events.\r\n   * @param {import(\"../events/Event.js\").default} event Event.\r\n   * @protected\r\n   */\n  handleTileChange(event) {\n    const tile = /** @type {import(\"../Tile.js\").default} */event.target;\n    const uid = getUid(tile);\n    const tileState = tile.getState();\n    let type;\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type = tileState == TileState.ERROR ? TileEventType.TILELOADERROR : tileState == TileState.LOADED ? TileEventType.TILELOADEND : undefined;\n    }\n    if (type != undefined) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  }\n\n  /**\r\n   * Deprecated.  Use an ImageTile source instead.\r\n   * Set the tile load function of the source.\r\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\r\n   * @api\r\n   */\n  setTileLoadFunction(tileLoadFunction) {\n    this.tileLoadFunction = tileLoadFunction;\n    this.changed();\n  }\n\n  /**\r\n   * Deprecated.  Use an ImageTile source instead.\r\n   * Set the tile URL function of the source.\r\n   * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\r\n   * @param {string} [key] Optional new tile key for the source.\r\n   * @api\r\n   */\n  setTileUrlFunction(tileUrlFunction, key) {\n    this.tileUrlFunction = tileUrlFunction;\n    if (typeof key !== 'undefined') {\n      this.setKey(key);\n    } else {\n      this.changed();\n    }\n  }\n\n  /**\r\n   * Set the URL to use for requests.\r\n   * @param {string} url URL.\r\n   * @api\r\n   */\n  setUrl(url) {\n    const urls = expandUrl(url);\n    this.urls = urls;\n    this.setUrls(urls);\n  }\n\n  /**\r\n   * Deprecated.  Use an ImageTile source instead.\r\n   * Set the URLs to use for requests.\r\n   * @param {Array<string>} urls URLs.\r\n   * @api\r\n   */\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n    if (this.generateTileUrlFunction_) {\n      this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);\n    } else {\n      this.setKey(key);\n    }\n  }\n\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {string|undefined} Tile URL.\r\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    return undefined;\n  }\n}\nexport default UrlTile;", "/**\r\n * @module ol/source/TileImage\r\n */\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport TileState from '../TileState.js';\nimport UrlTile from './UrlTile.js';\nimport { equivalent, get as getProjection } from '../proj.js';\nimport { getForProjection as getTileGridForProjection } from '../tilegrid.js';\nimport { getUid } from '../util.js';\n\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\r\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\r\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\r\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\r\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\r\n * Higher values can increase reprojection performance, but decrease precision.\r\n * @property {import(\"./Source.js\").State} [state] Source state.\r\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\r\n * Default is {@link module:ol/ImageTile~ImageTile}.\r\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\r\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\r\n * ```js\r\n * function(imageTile, src) {\r\n *   imageTile.getImage().src = src;\r\n * };\r\n * ```\r\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\r\n * service advertizes 256px by 256px tiles but actually sends 512px\r\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\r\n * should be set to `2`.\r\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function\r\n * for the url option instead.\r\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\r\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\r\n * used instead of defining each one separately in the `urls` option.\r\n * @property {Array<string>} [urls] An array of URL templates.\r\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\r\n * request out-of-bounds tiles from the server. When set to `false`, only one\r\n * world will be rendered. When set to `true`, tiles will be requested for one\r\n * world only, but they will be wrapped horizontally to render multiple worlds.\r\n * @property {number} [transition] Duration of the opacity transition for rendering.\r\n * To disable the opacity transition, pass `transition: 0`.\r\n * @property {string} [key] Optional tile key for proper cache fetching\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\r\n * Choose whether to use tiles with a higher or lower zoom level when between integer\r\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\r\n */\n\n/**\r\n * @deprecated Use the ol/source/ImageTile.js instead.\r\n *\r\n * @fires import(\"./Tile.js\").TileSourceEvent\r\n * @api\r\n */\nclass TileImage extends UrlTile {\n  /**\r\n   * @param {!Options} options Image tile options.\r\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction ? options.tileLoadFunction : defaultTileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate !== undefined ? options.interpolate : true,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection\n    });\n\n    /**\r\n     * @protected\r\n     * @type {?string}\r\n     */\n    this.crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\r\n     * @protected\r\n     * @type {typeof ImageTile}\r\n     */\n    this.tileClass = options.tileClass !== undefined ? options.tileClass : ImageTile;\n\n    /**\r\n     * @protected\r\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\r\n     */\n    this.tileGridForProjection = {};\n\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\n    this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\n    this.renderReprojectionEdges_ = false;\n  }\n\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {number} Gutter.\r\n   * @override\r\n   */\n  getGutterForProjection(projection) {\n    if (this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n      return 0;\n    }\n    return this.getGutter();\n  }\n\n  /**\r\n   * @return {number} Gutter.\r\n   */\n  getGutter() {\n    return 0;\n  }\n\n  /**\r\n   * Return the key to be used for all tiles in the source.\r\n   * @return {string} The key for all tiles.\r\n   * @override\r\n   */\n  getKey() {\n    let key = super.getKey();\n    if (!this.getInterpolate()) {\n      key += ':disable-interpolation';\n    }\n    return key;\n  }\n\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\r\n   * @override\r\n   */\n  getTileGridForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    }\n    const projKey = getUid(projection);\n    if (!(projKey in this.tileGridForProjection)) {\n      this.tileGridForProjection[projKey] = getTileGridForProjection(projection);\n    }\n    return this.tileGridForProjection[projKey];\n  }\n\n  /**\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @param {string} key The key set on the tile.\r\n   * @return {!ImageTile} Tile.\r\n   * @private\r\n   */\n  createTile_(z, x, y, pixelRatio, projection, key) {\n    const tileCoord = [z, x, y];\n    const urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n    const tileUrl = urlTileCoord ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection) : undefined;\n    const tile = new this.tileClass(tileCoord, tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY, tileUrl !== undefined ? tileUrl : '', this.crossOrigin, this.tileLoadFunction, this.tileOptions);\n    tile.key = key;\n    tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));\n    return tile;\n  }\n\n  /**\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {!(ImageTile|ReprojTile)} Tile.\r\n   * @override\r\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (!sourceProjection || !projection || equivalent(sourceProjection, projection)) {\n      return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);\n    }\n    const tileCoord = [z, x, y];\n    const key = this.getKey();\n    const sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n    const targetTileGrid = this.getTileGridForProjection(projection);\n    const wrappedTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n    const tile = new ReprojTile(sourceProjection, sourceTileGrid, projection, targetTileGrid, tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio), this.getGutter(), (z, x, y, pixelRatio) => this.getTileInternal(z, x, y, pixelRatio, sourceProjection), this.reprojectionErrorThreshold_, this.renderReprojectionEdges_, this.tileOptions);\n    tile.key = key;\n    return tile;\n  }\n\n  /**\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {!import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {!ImageTile} Tile.\r\n   * @protected\r\n   */\n  getTileInternal(z, x, y, pixelRatio, projection) {\n    const key = this.getKey();\n    return this.createTile_(z, x, y, pixelRatio, projection, key);\n  }\n\n  /**\r\n   * Sets whether to render reprojection edges or not (usually for debugging).\r\n   * @param {boolean} render Render the edges.\r\n   * @api\r\n   */\n  setRenderReprojectionEdges(render) {\n    if (this.renderReprojectionEdges_ == render) {\n      return;\n    }\n    this.renderReprojectionEdges_ = render;\n    this.changed();\n  }\n\n  /**\r\n   * Sets the tile grid to use when reprojecting the tiles to the given\r\n   * projection instead of the default tile grid for the projection.\r\n   *\r\n   * This can be useful when the default tile grid cannot be created\r\n   * (e.g. projection has no extent defined) or\r\n   * for optimization reasons (custom tile size, resolutions, ...).\r\n   *\r\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\r\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\r\n   * @api\r\n   */\n  setTileGridForProjection(projection, tilegrid) {\n    const proj = getProjection(projection);\n    if (proj) {\n      const projKey = getUid(proj);\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = tilegrid;\n      }\n    }\n  }\n}\n\n/**\r\n * @param {ImageTile} imageTile Image tile.\r\n * @param {string} src Source.\r\n */\nfunction defaultTileLoadFunction(imageTile, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */imageTile.getImage().src = src;\n}\nexport default TileImage;", "/**\r\n * @module ol/source/XYZ\r\n */\n\nimport TileImage from './TileImage.js';\nimport { createXYZ, extentFromProjection } from '../tilegrid.js';\n\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\r\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\r\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\r\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Projection.\r\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\r\n * Higher values can increase reprojection performance, but decrease precision.\r\n * @property {number} [maxZoom=42] Optional max zoom level. Not used if `tileGrid` is provided.\r\n * @property {number} [minZoom=0] Optional min zoom level. Not used if `tileGrid` is provided.\r\n * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.\r\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\r\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Deprecated.  Use an ImageTile source with a loader\r\n * instead.  Optional function to load a tile given a URL. The default is\r\n * ```js\r\n * function(imageTile, src) {\r\n *   imageTile.getImage().src = src;\r\n * };\r\n * ```\r\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.\r\n * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px\r\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\r\n * should be set to `2`.\r\n * @property {number|import(\"../size.js\").Size} [tileSize=[256, 256]] The tile size used by the tile service.\r\n * Not used if `tileGrid` is provided.\r\n * @property {number} [gutter=0] The size in pixels of the gutter around image tiles to ignore.\r\n * This allows artifacts of rendering at tile edges to be ignored.\r\n * Supported images should be wider and taller than the tile size by a value of `2 x gutter`.\r\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function\r\n * for the url option instead.\r\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`,\r\n * and `{z}` placeholders. A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`,\r\n * may be used instead of defining each one separately in the `urls` option.\r\n * @property {Array<string>} [urls] Deprecated.  Use an ImageTile source and provide an array of URLs for the\r\n * url option instead.\r\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\r\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\r\n * To disable the opacity transition, pass `transition: 0`.\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\r\n * Choose whether to use tiles with a higher or lower zoom level when between integer\r\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\r\n */\n\n/**\r\n * @classdesc\r\n * Layer source for tile data with URLs in a set XYZ format that are\r\n * defined in a URL template. By default, this follows the widely-used\r\n * Google grid where `x` 0 and `y` 0 are in the top left. Grids like\r\n * TMS where `x` 0 and `y` 0 are in the bottom left can be used by\r\n * using the `{-y}` placeholder in the URL template, so long as the\r\n * source does not have a custom tile grid. In this case\r\n * a `tileUrlFunction` can be used, such as:\r\n * ```js\r\n *  tileUrlFunction: function(coordinate) {\r\n *    return 'http://mapserver.com/' + coordinate[0] + '/' +\r\n *      coordinate[1] + '/' + (-coordinate[2] - 1) + '.png';\r\n *  }\r\n * ```\r\n * @api\r\n */\nclass XYZ extends TileImage {\n  /**\r\n   * @param {Options} [options] XYZ options.\r\n   */\n  constructor(options) {\n    options = options || {};\n    const projection = options.projection !== undefined ? options.projection : 'EPSG:3857';\n    const tileGrid = options.tileGrid !== undefined ? options.tileGrid : createXYZ({\n      extent: extentFromProjection(projection),\n      maxResolution: options.maxResolution,\n      maxZoom: options.maxZoom,\n      minZoom: options.minZoom,\n      tileSize: options.tileSize\n    });\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileGrid: tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection\n    });\n\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\n    this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n  }\n\n  /**\r\n   * @return {number} Gutter.\r\n   * @override\r\n   */\n  getGutter() {\n    return this.gutter_;\n  }\n}\nexport default XYZ;", "/**\r\n * @module ol/source/OSM\r\n */\n\nimport XYZ from './XYZ.js';\n\n/**\r\n * The attribution containing a link to the OpenStreetMap Copyright and License\r\n * page.\r\n * @const\r\n * @type {string}\r\n * @api\r\n */\nexport const ATTRIBUTION = '&#169; ' + '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">OpenStreetMap</a> ' + 'contributors.';\n\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\r\n * @property {null|string} [crossOrigin='anonymous'] The `crossOrigin` attribute for loaded images.  Note that\r\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\r\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\r\n * @property {number} [maxZoom=19] Max zoom.\r\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\r\n * Higher values can increase reprojection performance, but decrease precision.\r\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\r\n * ```js\r\n * function(imageTile, src) {\r\n *   imageTile.getImage().src = src;\r\n * };\r\n * ```\r\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\r\n * To disable the opacity transition, pass `transition: 0`.\r\n * @property {string} [url='https://tile.openstreetmap.org/{z}/{x}/{y}.png'] URL template.\r\n * Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\r\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\r\n * Choose whether to use tiles with a higher or lower zoom level when between integer\r\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\r\n */\n\n/**\r\n * @classdesc\r\n * Layer source for the OpenStreetMap tile server.\r\n * @api\r\n */\nclass OSM extends XYZ {\n  /**\r\n   * @param {Options} [options] Open Street Map options.\r\n   */\n  constructor(options) {\n    options = options || {};\n    let attributions;\n    if (options.attributions !== undefined) {\n      attributions = options.attributions;\n    } else {\n      attributions = [ATTRIBUTION];\n    }\n    const crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : 'anonymous';\n    const url = options.url !== undefined ? options.url : 'https://tile.openstreetmap.org/{z}/{x}/{y}.png';\n    super({\n      attributions: attributions,\n      attributionsCollapsible: false,\n      cacheSize: options.cacheSize,\n      crossOrigin: crossOrigin,\n      interpolate: options.interpolate,\n      maxZoom: options.maxZoom !== undefined ? options.maxZoom : 19,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileLoadFunction: options.tileLoadFunction,\n      transition: options.transition,\n      url: url,\n      wrapX: options.wrapX,\n      zDirection: options.zDirection\n    });\n  }\n}\nexport default OSM;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,IAAO,wBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMb,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOf,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQb,eAAe;AACjB;;;ACZA,IAAM,eAAe,CAAC,GAAG,GAAG,CAAC;AAM7B,IAAM,WAAW;AAuCjB,IAAM,WAAN,MAAe;AAAA;AAAA;AAAA;AAAA,EAIb,YAAY,SAAS;AAKnB,SAAK,UAAU,QAAQ,YAAY,SAAY,QAAQ,UAAU;AAMjE,SAAK,eAAe,QAAQ;AAC5B,WAAO;AAAA,MAAS,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMrB,CAAC,GAAG,MAAM,IAAI;AAAA,MAAG;AAAA,IAAI,GAAG,kDAAkD;AAG1E,QAAI;AACJ,QAAI,CAAC,QAAQ,SAAS;AACpB,eAAS,IAAI,GAAG,KAAK,KAAK,aAAa,SAAS,GAAG,IAAI,IAAI,EAAE,GAAG;AAC9D,YAAI,CAAC,YAAY;AACf,uBAAa,KAAK,aAAa,CAAC,IAAI,KAAK,aAAa,IAAI,CAAC;AAAA,QAC7D,OAAO;AACL,cAAI,KAAK,aAAa,CAAC,IAAI,KAAK,aAAa,IAAI,CAAC,MAAM,YAAY;AAClE,yBAAa;AACb;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAMA,SAAK,cAAc;AAMnB,SAAK,UAAU,KAAK,aAAa,SAAS;AAM1C,SAAK,UAAU,QAAQ,WAAW,SAAY,QAAQ,SAAS;AAM/D,SAAK,WAAW;AAChB,QAAI,QAAQ,YAAY,QAAW;AACjC,WAAK,WAAW,QAAQ;AACxB,aAAO,KAAK,SAAS,UAAU,KAAK,aAAa,QAAQ,qDAAqD;AAAA,IAChH;AACA,UAAM,SAAS,QAAQ;AACvB,QAAI,WAAW,UAAa,CAAC,KAAK,WAAW,CAAC,KAAK,UAAU;AAC3D,WAAK,UAAU,WAAW,MAAM;AAAA,IAClC;AACA,WAAO,CAAC,KAAK,WAAW,KAAK,YAAY,KAAK,WAAW,CAAC,KAAK,UAAU,6DAA6D;AAMtI,SAAK,aAAa;AAClB,QAAI,QAAQ,cAAc,QAAW;AACnC,WAAK,aAAa,QAAQ;AAC1B,aAAO,KAAK,WAAW,UAAU,KAAK,aAAa,QAAQ,uDAAuD;AAAA,IACpH;AAMA,SAAK,YAAY,QAAQ,aAAa,SAAY,QAAQ,WAAW,CAAC,KAAK,aAAa,oBAAoB;AAC5G,WAAO,CAAC,KAAK,aAAa,KAAK,cAAc,KAAK,aAAa,CAAC,KAAK,YAAY,iEAAiE;AAMlJ,SAAK,UAAU,WAAW,SAAY,SAAS;AAM/C,SAAK,kBAAkB;AAMvB,SAAK,WAAW,CAAC,GAAG,CAAC;AAMrB,SAAK,aAAa,CAAC,GAAG,GAAG,GAAG,CAAC;AAC7B,QAAI,QAAQ,UAAU,QAAW;AAC/B,WAAK,kBAAkB,QAAQ,MAAM,IAAI,CAAC,MAAM,MAAM;AACpD,cAAM,YAAY,IAAI,kBAAU,KAAK,IAAI,GAAG,KAAK,CAAC,CAAC,GAAG,KAAK,IAAI,KAAK,CAAC,IAAI,GAAG,EAAE,GAAG,KAAK,IAAI,GAAG,KAAK,CAAC,CAAC,GAAG,KAAK,IAAI,KAAK,CAAC,IAAI,GAAG,EAAE,CAAC;AAChI,YAAI,QAAQ;AACV,gBAAM,sBAAsB,KAAK,0BAA0B,QAAQ,CAAC;AACpE,oBAAU,OAAO,KAAK,IAAI,oBAAoB,MAAM,UAAU,IAAI;AAClE,oBAAU,OAAO,KAAK,IAAI,oBAAoB,MAAM,UAAU,IAAI;AAClE,oBAAU,OAAO,KAAK,IAAI,oBAAoB,MAAM,UAAU,IAAI;AAClE,oBAAU,OAAO,KAAK,IAAI,oBAAoB,MAAM,UAAU,IAAI;AAAA,QACpE;AACA,eAAO;AAAA,MACT,CAAC;AAAA,IACH,WAAW,QAAQ;AACjB,WAAK,qBAAqB,MAAM;AAAA,IAClC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,iBAAiB,QAAQ,MAAM,UAAU;AACvC,UAAM,YAAY,KAAK,0BAA0B,QAAQ,IAAI;AAC7D,aAAS,IAAI,UAAU,MAAM,KAAK,UAAU,MAAM,KAAK,IAAI,EAAE,GAAG;AAC9D,eAAS,IAAI,UAAU,MAAM,KAAK,UAAU,MAAM,KAAK,IAAI,EAAE,GAAG;AAC9D,iBAAS,CAAC,MAAM,GAAG,CAAC,CAAC;AAAA,MACvB;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,gCAAgC,WAAW,UAAU,eAAe,YAAY;AAC9E,QAAI,WAAW,GAAG;AAClB,QAAI,kBAAkB;AACtB,QAAI,IAAI,UAAU,CAAC,IAAI;AACvB,QAAI,KAAK,gBAAgB,GAAG;AAC1B,UAAI,UAAU,CAAC;AACf,UAAI,UAAU,CAAC;AAAA,IACjB,OAAO;AACL,wBAAkB,KAAK,mBAAmB,WAAW,UAAU;AAAA,IACjE;AACA,WAAO,KAAK,KAAK,SAAS;AACxB,UAAI,MAAM,UAAa,MAAM,QAAW;AACtC,YAAI,KAAK,MAAM,IAAI,CAAC;AACpB,YAAI,KAAK,MAAM,IAAI,CAAC;AACpB,oBAAYA,gBAAwB,GAAG,GAAG,GAAG,GAAG,aAAa;AAAA,MAC/D,OAAO;AACL,oBAAY,KAAK,0BAA0B,iBAAiB,GAAG,aAAa;AAAA,MAC9E;AACA,UAAI,SAAS,GAAG,SAAS,GAAG;AAC1B,eAAO;AAAA,MACT;AACA,QAAE;AAAA,IACJ;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY;AACV,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,aAAa;AACX,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,aAAa;AACX,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,UAAU,GAAG;AACX,QAAI,KAAK,SAAS;AAChB,aAAO,KAAK;AAAA,IACd;AACA,WAAO,KAAK,SAAS,CAAC;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,cAAc,GAAG;AACf,WAAO,KAAK,aAAa,CAAC;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,iBAAiB;AACf,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,2BAA2B,WAAW,eAAe,YAAY;AAC/D,QAAI,UAAU,CAAC,IAAI,KAAK,SAAS;AAC/B,UAAI,KAAK,gBAAgB,GAAG;AAC1B,cAAM,OAAO,UAAU,CAAC,IAAI;AAC5B,cAAM,OAAO,UAAU,CAAC,IAAI;AAC5B,eAAOA,gBAAwB,MAAM,OAAO,GAAG,MAAM,OAAO,GAAG,aAAa;AAAA,MAC9E;AACA,YAAM,kBAAkB,KAAK,mBAAmB,WAAW,cAAc,KAAK,UAAU;AACxF,aAAO,KAAK,0BAA0B,iBAAiB,UAAU,CAAC,IAAI,GAAG,aAAa;AAAA,IACxF;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,6BAA6B,WAAW,GAAG,eAAe;AACxD,QAAI,IAAI,KAAK,WAAW,IAAI,KAAK,SAAS;AACxC,aAAO;AAAA,IACT;AACA,UAAM,aAAa,UAAU,CAAC;AAC9B,UAAM,aAAa,UAAU,CAAC;AAC9B,UAAM,aAAa,UAAU,CAAC;AAC9B,QAAI,MAAM,YAAY;AACpB,aAAOA,gBAAwB,YAAY,YAAY,YAAY,YAAY,aAAa;AAAA,IAC9F;AACA,QAAI,KAAK,aAAa;AACpB,YAAM,SAAS,KAAK,IAAI,KAAK,aAAa,IAAI,UAAU;AACxD,YAAM,OAAO,KAAK,MAAM,aAAa,MAAM;AAC3C,YAAM,OAAO,KAAK,MAAM,aAAa,MAAM;AAC3C,UAAI,IAAI,YAAY;AAClB,eAAOA,gBAAwB,MAAM,MAAM,MAAM,MAAM,aAAa;AAAA,MACtE;AACA,YAAM,OAAO,KAAK,MAAM,UAAU,aAAa,EAAE,IAAI;AACrD,YAAM,OAAO,KAAK,MAAM,UAAU,aAAa,EAAE,IAAI;AACrD,aAAOA,gBAAwB,MAAM,MAAM,MAAM,MAAM,aAAa;AAAA,IACtE;AACA,UAAM,kBAAkB,KAAK,mBAAmB,WAAW,KAAK,UAAU;AAC1E,WAAO,KAAK,0BAA0B,iBAAiB,GAAG,aAAa;AAAA,EACzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,0BAA0B,QAAQ,GAAG,eAAe;AAClD,SAAK,uBAAuB,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,GAAG,OAAO,YAAY;AACxE,UAAM,OAAO,aAAa,CAAC;AAC3B,UAAM,OAAO,aAAa,CAAC;AAC3B,SAAK,uBAAuB,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,GAAG,MAAM,YAAY;AACvE,UAAM,OAAO,aAAa,CAAC;AAC3B,UAAM,OAAO,aAAa,CAAC;AAC3B,WAAOA,gBAAwB,MAAM,MAAM,MAAM,MAAM,aAAa;AAAA,EACtE;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,mBAAmB,WAAW;AAC5B,UAAM,SAAS,KAAK,UAAU,UAAU,CAAC,CAAC;AAC1C,UAAM,aAAa,KAAK,cAAc,UAAU,CAAC,CAAC;AAClD,UAAM,WAAW,OAAO,KAAK,YAAY,UAAU,CAAC,CAAC,GAAG,KAAK,QAAQ;AACrE,WAAO,CAAC,OAAO,CAAC,KAAK,UAAU,CAAC,IAAI,OAAO,SAAS,CAAC,IAAI,YAAY,OAAO,CAAC,KAAK,UAAU,CAAC,IAAI,OAAO,SAAS,CAAC,IAAI,UAAU;AAAA,EAClI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,mBAAmB,WAAW,YAAY;AACxC,UAAM,SAAS,KAAK,UAAU,UAAU,CAAC,CAAC;AAC1C,UAAM,aAAa,KAAK,cAAc,UAAU,CAAC,CAAC;AAClD,UAAM,WAAW,OAAO,KAAK,YAAY,UAAU,CAAC,CAAC,GAAG,KAAK,QAAQ;AACrE,UAAM,OAAO,OAAO,CAAC,IAAI,UAAU,CAAC,IAAI,SAAS,CAAC,IAAI;AACtD,UAAM,OAAO,OAAO,CAAC,KAAK,UAAU,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI;AAC5D,UAAM,OAAO,OAAO,SAAS,CAAC,IAAI;AAClC,UAAM,OAAO,OAAO,SAAS,CAAC,IAAI;AAClC,WAAO,eAAe,MAAM,MAAM,MAAM,MAAM,UAAU;AAAA,EAC1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,kCAAkC,YAAY,YAAY,eAAe;AACvE,WAAO,KAAK,gCAAgC,WAAW,CAAC,GAAG,WAAW,CAAC,GAAG,YAAY,OAAO,aAAa;AAAA,EAC5G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,gCAAgC,GAAG,GAAG,YAAY,2BAA2B,eAAe;AAC1F,UAAM,IAAI,KAAK,kBAAkB,UAAU;AAC3C,UAAMC,SAAQ,aAAa,KAAK,cAAc,CAAC;AAC/C,UAAM,SAAS,KAAK,UAAU,CAAC;AAC/B,UAAM,WAAW,OAAO,KAAK,YAAY,CAAC,GAAG,KAAK,QAAQ;AAC1D,QAAI,aAAaA,UAAS,IAAI,OAAO,CAAC,KAAK,aAAa,SAAS,CAAC;AAClE,QAAI,aAAaA,UAAS,OAAO,CAAC,IAAI,KAAK,aAAa,SAAS,CAAC;AAClE,QAAI,2BAA2B;AAC7B,mBAAa,KAAK,YAAY,QAAQ,IAAI;AAC1C,mBAAa,KAAK,YAAY,QAAQ,IAAI;AAAA,IAC5C,OAAO;AACL,mBAAa,MAAM,YAAY,QAAQ;AACvC,mBAAa,MAAM,YAAY,QAAQ;AAAA,IACzC;AACA,WAAOD,gBAAwB,GAAG,YAAY,YAAY,aAAa;AAAA,EACzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,uBAAuB,GAAG,GAAG,GAAG,2BAA2B,eAAe;AACxE,UAAM,SAAS,KAAK,UAAU,CAAC;AAC/B,UAAM,aAAa,KAAK,cAAc,CAAC;AACvC,UAAM,WAAW,OAAO,KAAK,YAAY,CAAC,GAAG,KAAK,QAAQ;AAC1D,QAAI,cAAc,IAAI,OAAO,CAAC,KAAK,aAAa,SAAS,CAAC;AAC1D,QAAI,cAAc,OAAO,CAAC,IAAI,KAAK,aAAa,SAAS,CAAC;AAC1D,QAAI,2BAA2B;AAC7B,mBAAa,KAAK,YAAY,QAAQ,IAAI;AAC1C,mBAAa,KAAK,YAAY,QAAQ,IAAI;AAAA,IAC5C,OAAO;AACL,mBAAa,MAAM,YAAY,QAAQ;AACvC,mBAAa,MAAM,YAAY,QAAQ;AAAA,IACzC;AACA,WAAOA,gBAAwB,GAAG,YAAY,YAAY,aAAa;AAAA,EACzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,yBAAyB,YAAY,GAAG,eAAe;AACrD,WAAO,KAAK,uBAAuB,WAAW,CAAC,GAAG,WAAW,CAAC,GAAG,GAAG,OAAO,aAAa;AAAA,EAC1F;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,uBAAuB,WAAW;AAChC,WAAO,KAAK,aAAa,UAAU,CAAC,CAAC;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,YAAY,GAAG;AACb,QAAI,KAAK,WAAW;AAClB,aAAO,KAAK;AAAA,IACd;AACA,WAAO,KAAK,WAAW,CAAC;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,iBAAiB,GAAG;AAClB,QAAI,CAAC,KAAK,iBAAiB;AACzB,aAAO,KAAK,UAAU,KAAK,0BAA0B,KAAK,SAAS,CAAC,IAAI;AAAA,IAC1E;AACA,WAAO,KAAK,gBAAgB,CAAC;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBA,kBAAkB,YAAY,eAAe;AAC3C,UAAM,IAAI,kBAAkB,KAAK,cAAc,YAAY,iBAAiB,CAAC;AAC7E,WAAO,MAAM,GAAG,KAAK,SAAS,KAAK,OAAO;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,4BAA4B,WAAW,UAAU;AAC/C,WAAO,qBAAqB,UAAU,GAAG,SAAS,QAAQ,GAAG,KAAK,mBAAmB,SAAS,CAAC;AAAA,EACjG;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,qBAAqB,QAAQ;AAC3B,UAAM,SAAS,KAAK,aAAa;AACjC,UAAM,iBAAiB,IAAI,MAAM,MAAM;AACvC,aAAS,IAAI,KAAK,SAAS,IAAI,QAAQ,EAAE,GAAG;AAC1C,qBAAe,CAAC,IAAI,KAAK,0BAA0B,QAAQ,CAAC;AAAA,IAC9D;AACA,SAAK,kBAAkB;AAAA,EACzB;AACF;AACA,IAAO,mBAAQ;;;ACpiBR,SAAS,iBAAiB,YAAY;AAC3C,MAAI,WAAW,WAAW,mBAAmB;AAC7C,MAAI,CAAC,UAAU;AACb,eAAW,oBAAoB,UAAU;AACzC,eAAW,mBAAmB,QAAQ;AAAA,EACxC;AACA,SAAO;AACT;AAQO,SAAS,MAAM,UAAU,WAAW,YAAY;AACrD,QAAM,IAAI,UAAU,CAAC;AACrB,QAAM,SAAS,SAAS,mBAAmB,SAAS;AACpD,QAAM,mBAAmB,qBAAqB,UAAU;AACxD,MAAI,CAAC,mBAAmB,kBAAkB,MAAM,GAAG;AACjD,UAAM,aAAa,SAAS,gBAAgB;AAC5C,UAAM,aAAa,KAAK,MAAM,iBAAiB,CAAC,IAAI,OAAO,CAAC,KAAK,UAAU;AAC3E,WAAO,CAAC,KAAK,aAAa;AAC1B,WAAO,SAAS,yBAAyB,QAAQ,CAAC;AAAA,EACpD;AACA,SAAO;AACT;AAWO,SAAS,gBAAgB,QAAQ,SAAS,UAAU,QAAQ;AACjE,WAAS,WAAW,SAAY,SAAS;AACzC,QAAM,cAAc,sBAAsB,QAAQ,SAAS,QAAQ;AACnE,SAAO,IAAI,iBAAS;AAAA,IAClB;AAAA,IACA,QAAQ,UAAU,QAAQ,MAAM;AAAA,IAChC;AAAA,IACA;AAAA,EACF,CAAC;AACH;AAoBO,SAAS,UAAU,SAAS;AACjC,QAAM,aAAa,WAAW,CAAC;AAC/B,QAAM,SAAS,WAAW,UAAU,IAAc,WAAW,EAAE,UAAU;AACzE,QAAM,cAAc;AAAA,IAClB;AAAA,IACA,SAAS,WAAW;AAAA,IACpB,UAAU,WAAW;AAAA,IACrB,aAAa,sBAAsB,QAAQ,WAAW,SAAS,WAAW,UAAU,WAAW,aAAa;AAAA,EAC9G;AACA,SAAO,IAAI,iBAAS,WAAW;AACjC;AAYA,SAAS,sBAAsB,QAAQ,SAAS,UAAU,eAAe;AACvE,YAAU,YAAY,SAAY,UAAU;AAC5C,aAAW,OAAO,aAAa,SAAY,WAAW,iBAAiB;AACvE,QAAM,SAAS,UAAU,MAAM;AAC/B,QAAM,QAAQ,SAAS,MAAM;AAC7B,kBAAgB,gBAAgB,IAAI,gBAAgB,KAAK,IAAI,QAAQ,SAAS,CAAC,GAAG,SAAS,SAAS,CAAC,CAAC;AACtG,QAAM,SAAS,UAAU;AACzB,QAAM,cAAc,IAAI,MAAM,MAAM;AACpC,WAAS,IAAI,GAAG,IAAI,QAAQ,EAAE,GAAG;AAC/B,gBAAY,CAAC,IAAI,gBAAgB,KAAK,IAAI,GAAG,CAAC;AAAA,EAChD;AACA,SAAO;AACT;AAWO,SAAS,oBAAoB,YAAY,SAAS,UAAU,QAAQ;AACzE,QAAM,SAAS,qBAAqB,UAAU;AAC9C,SAAO,gBAAgB,QAAQ,SAAS,UAAU,MAAM;AAC1D;AAQO,SAAS,qBAAqB,YAAY;AAC/C,eAAa,IAAc,UAAU;AACrC,MAAI,SAAS,WAAW,UAAU;AAClC,MAAI,CAAC,QAAQ;AACX,UAAM,OAAO,MAAM,gBAAgB,UAAU,WAAW,iBAAiB;AACzE,aAAS,eAAe,CAAC,MAAM,CAAC,MAAM,MAAM,IAAI;AAAA,EAClD;AACA,SAAO;AACT;;;ACpGA,IAAM,aAAN,cAAyB,eAAO;AAAA;AAAA;AAAA;AAAA,EAI9B,YAAY,SAAS;AACnB,UAAM;AAAA,MACJ,cAAc,QAAQ;AAAA,MACtB,yBAAyB,QAAQ;AAAA,MACjC,YAAY,QAAQ;AAAA,MACpB,OAAO,QAAQ;AAAA,MACf,OAAO,QAAQ;AAAA,MACf,aAAa,QAAQ;AAAA,IACvB,CAAC;AAKD,SAAK;AAKL,SAAK;AAKL,SAAK;AAML,SAAK,kBAAkB,QAAQ,mBAAmB,SAAY,QAAQ,iBAAiB;AAMvF,SAAK,WAAW,QAAQ,aAAa,SAAY,QAAQ,WAAW;AACpE,UAAM,WAAW,CAAC,KAAK,GAAG;AAC1B,QAAI,KAAK,UAAU;AACjB,aAAO,KAAK,SAAS,YAAY,KAAK,SAAS,WAAW,CAAC,GAAG,QAAQ;AAAA,IACxE;AAMA,SAAK,UAAU,CAAC,GAAG,CAAC;AAMpB,SAAK,OAAO,QAAQ,OAAO,OAAO,IAAI;AAMtC,SAAK,cAAc;AAAA,MACjB,YAAY,QAAQ;AAAA,MACpB,aAAa,QAAQ;AAAA,IACvB;AASA,SAAK,aAAa,QAAQ,aAAa,QAAQ,aAAa;AAAA,EAC9D;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,uBAAuB,YAAY;AACjC,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAAS;AACP,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,KAAK;AACV,QAAI,KAAK,SAAS,KAAK;AACrB,WAAK,OAAO;AACZ,WAAK,QAAQ;AAAA,IACf;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,eAAe,YAAY;AACzB,UAAM,WAAW,aAAa,KAAK,yBAAyB,UAAU,IAAI,KAAK;AAC/E,QAAI,CAAC,UAAU;AACb,aAAO;AAAA,IACT;AACA,WAAO,SAAS,eAAe;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,QAAQ,GAAG,GAAG,GAAG,YAAY,YAAY;AACvC,WAAO,SAAS;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,cAAc;AACZ,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,yBAAyB,YAAY;AACnC,QAAI,CAAC,KAAK,UAAU;AAClB,aAAO,iBAAyB,UAAU;AAAA,IAC5C;AACA,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,kBAAkB,YAAY;AAC5B,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,iBAAiB,GAAG,YAAY,YAAY;AAC1C,UAAM,WAAW,KAAK,yBAAyB,UAAU;AACzD,UAAM,iBAAiB,KAAK,kBAAkB,UAAU;AACxD,UAAM,WAAW,OAAO,SAAS,YAAY,CAAC,GAAG,KAAK,OAAO;AAC7D,QAAI,kBAAkB,GAAG;AACvB,aAAO;AAAA,IACT;AACA,WAAO,MAAU,UAAU,gBAAgB,KAAK,OAAO;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,+BAA+B,WAAW,YAAY;AACpD,UAAM,iBAAiB,eAAe,SAAY,aAAa,KAAK,cAAc;AAClF,UAAM,WAAW,eAAe,SAAY,KAAK,yBAAyB,cAAc,IAAI,KAAK,YAAY,KAAK,yBAAyB,cAAc;AACzJ,QAAI,KAAK,SAAS,KAAK,eAAe,SAAS,GAAG;AAChD,kBAAY,MAAM,UAAU,WAAW,cAAc;AAAA,IACvD;AACA,WAAO,iBAAiB,WAAW,QAAQ,IAAI,YAAY;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,QAAQ;AAAA,EAAC;AAAA;AAAA;AAAA;AAAA,EAKT,UAAU;AACR,SAAK,MAAM;AACX,UAAM,QAAQ;AAAA,EAChB;AACF;AAOO,IAAM,kBAAN,cAA8B,cAAM;AAAA;AAAA;AAAA;AAAA;AAAA,EAKzC,YAAY,MAAM,MAAM;AACtB,UAAM,IAAI;AAOV,SAAK,OAAO;AAAA,EACd;AACF;AACA,IAAOE,gBAAQ;;;ACtPf,IAAM,SAAS;AACf,IAAM,SAAS;AACf,IAAM,SAAS;AACf,IAAM,aAAa;AAWZ,SAAS,kBAAkB,UAAU,GAAG,GAAG,GAAG,MAAM;AACzD,SAAO,SAAS,QAAQ,QAAQ,EAAE,SAAS,CAAC,EAAE,QAAQ,QAAQ,EAAE,SAAS,CAAC,EAAE,QAAQ,QAAQ,EAAE,SAAS,CAAC,EAAE,QAAQ,YAAY,WAAY;AACxI,QAAI,SAAS,QAAW;AACtB,YAAM,IAAI,MAAM,2EAA2E;AAAA,IAC7F;AACA,YAAQ,OAAO,GAAG,SAAS;AAAA,EAC7B,CAAC;AACH;AAmBO,SAAS,UAAU,KAAK;AAC7B,QAAM,OAAO,CAAC;AACd,MAAI,QAAQ,sBAAsB,KAAK,GAAG;AAC1C,MAAI,OAAO;AAET,UAAM,gBAAgB,MAAM,CAAC,EAAE,WAAW,CAAC;AAC3C,UAAM,eAAe,MAAM,CAAC,EAAE,WAAW,CAAC;AAC1C,QAAI;AACJ,SAAK,WAAW,eAAe,YAAY,cAAc,EAAE,UAAU;AACnE,WAAK,KAAK,IAAI,QAAQ,MAAM,CAAC,GAAG,OAAO,aAAa,QAAQ,CAAC,CAAC;AAAA,IAChE;AACA,WAAO;AAAA,EACT;AACA,UAAQ,kBAAkB,KAAK,GAAG;AAClC,MAAI,OAAO;AAET,UAAM,OAAO,SAAS,MAAM,CAAC,GAAG,EAAE;AAClC,aAAS,IAAI,SAAS,MAAM,CAAC,GAAG,EAAE,GAAG,KAAK,MAAM,KAAK;AACnD,WAAK,KAAK,IAAI,QAAQ,MAAM,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;AAAA,IAC/C;AACA,WAAO;AAAA,EACT;AACA,OAAK,KAAK,GAAG;AACb,SAAO;AACT;;;ACnFO,SAAS,mBAAmB,UAAU,UAAU;AACrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOE,SAAU,WAAW,YAAY,YAAY;AAC3C,UAAI,CAAC,WAAW;AACd,eAAO;AAAA,MACT;AACA,UAAI;AACJ,YAAM,IAAI,UAAU,CAAC;AACrB,UAAI,UAAU;AAEZ,cAAM,QAAQ,SAAS,iBAAiB,CAAC;AACzC,YAAI,OAAO;AACT,iBAAO,MAAM,UAAU,IAAI;AAAA,QAC7B;AAAA,MACF;AACA,aAAO,kBAAkB,UAAU,GAAG,UAAU,CAAC,GAAG,UAAU,CAAC,GAAG,IAAI;AAAA,IACxE;AAAA;AAEJ;AAOO,SAAS,oBAAoB,WAAW,UAAU;AACvD,QAAM,MAAM,UAAU;AACtB,QAAM,mBAAmB,IAAI,MAAM,GAAG;AACtC,WAAS,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AAC5B,qBAAiB,CAAC,IAAI,mBAAmB,UAAU,CAAC,GAAG,QAAQ;AAAA,EACjE;AACA,SAAO,2BAA2B,gBAAgB;AACpD;AAMO,SAAS,2BAA2B,kBAAkB;AAC3D,MAAI,iBAAiB,WAAW,GAAG;AACjC,WAAO,iBAAiB,CAAC;AAAA,EAC3B;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOE,SAAU,WAAW,YAAY,YAAY;AAC3C,UAAI,CAAC,WAAW;AACd,eAAO;AAAA,MACT;AACA,YAAM,IAAI,KAAc,SAAS;AACjC,YAAM,QAAQ,OAAO,GAAG,iBAAiB,MAAM;AAC/C,aAAO,iBAAiB,KAAK,EAAE,WAAW,YAAY,UAAU;AAAA,IAClE;AAAA;AAEJ;;;ACvCA,IAAM,UAAN,MAAM,iBAAgBC,cAAW;AAAA;AAAA;AAAA;AAAA,EAI/B,YAAY,SAAS;AACnB,UAAM;AAAA,MACJ,cAAc,QAAQ;AAAA,MACtB,WAAW,QAAQ;AAAA,MACnB,YAAY,QAAQ;AAAA,MACpB,OAAO,QAAQ;AAAA,MACf,UAAU,QAAQ;AAAA,MAClB,gBAAgB,QAAQ;AAAA,MACxB,OAAO,QAAQ;AAAA,MACf,YAAY,QAAQ;AAAA,MACpB,aAAa,QAAQ;AAAA,MACrB,KAAK,QAAQ;AAAA,MACb,yBAAyB,QAAQ;AAAA,MACjC,YAAY,QAAQ;AAAA,IACtB,CAAC;AAMD,SAAK,2BAA2B,KAAK,oBAAoB,SAAQ,UAAU;AAM3E,SAAK,mBAAmB,QAAQ;AAChC,QAAI,QAAQ,iBAAiB;AAC3B,WAAK,kBAAkB,QAAQ;AAAA,IACjC;AAMA,SAAK,OAAO;AACZ,QAAI,QAAQ,MAAM;AAChB,WAAK,QAAQ,QAAQ,IAAI;AAAA,IAC3B,WAAW,QAAQ,KAAK;AACtB,WAAK,OAAO,QAAQ,GAAG;AAAA,IACzB;AAMA,SAAK,mBAAmB,CAAC;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,sBAAsB;AACpB,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,qBAAqB;AACnB,WAAO,OAAO,eAAe,IAAI,EAAE,oBAAoB,KAAK,kBAAkB,KAAK,gBAAgB,KAAK,IAAI,IAAI,KAAK;AAAA,EACvH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,UAAU;AACR,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,iBAAiB,OAAO;AACtB,UAAM;AAAA;AAAA,MAAkD,MAAM;AAAA;AAC9D,UAAM,MAAM,OAAO,IAAI;AACvB,UAAM,YAAY,KAAK,SAAS;AAChC,QAAI;AACJ,QAAI,aAAa,kBAAU,SAAS;AAClC,WAAK,iBAAiB,GAAG,IAAI;AAC7B,aAAO,sBAAc;AAAA,IACvB,WAAW,OAAO,KAAK,kBAAkB;AACvC,aAAO,KAAK,iBAAiB,GAAG;AAChC,aAAO,aAAa,kBAAU,QAAQ,sBAAc,gBAAgB,aAAa,kBAAU,SAAS,sBAAc,cAAc;AAAA,IAClI;AACA,QAAI,QAAQ,QAAW;AACrB,WAAK,cAAc,IAAI,gBAAgB,MAAM,IAAI,CAAC;AAAA,IACpD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,oBAAoB,kBAAkB;AACpC,SAAK,mBAAmB;AACxB,SAAK,QAAQ;AAAA,EACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,mBAAmB,iBAAiB,KAAK;AACvC,SAAK,kBAAkB;AACvB,QAAI,OAAO,QAAQ,aAAa;AAC9B,WAAK,OAAO,GAAG;AAAA,IACjB,OAAO;AACL,WAAK,QAAQ;AAAA,IACf;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,KAAK;AACV,UAAM,OAAO,UAAU,GAAG;AAC1B,SAAK,OAAO;AACZ,SAAK,QAAQ,IAAI;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,QAAQ,MAAM;AACZ,SAAK,OAAO;AACZ,UAAM,MAAM,KAAK,KAAK,IAAI;AAC1B,QAAI,KAAK,0BAA0B;AACjC,WAAK,mBAAmB,oBAAoB,MAAM,KAAK,QAAQ,GAAG,GAAG;AAAA,IACvE,OAAO;AACL,WAAK,OAAO,GAAG;AAAA,IACjB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,gBAAgB,WAAW,YAAY,YAAY;AACjD,WAAO;AAAA,EACT;AACF;AACA,IAAO,kBAAQ;;;ACjJf,IAAM,YAAN,cAAwB,gBAAQ;AAAA;AAAA;AAAA;AAAA,EAI9B,YAAY,SAAS;AACnB,UAAM;AAAA,MACJ,cAAc,QAAQ;AAAA,MACtB,WAAW,QAAQ;AAAA,MACnB,YAAY,QAAQ;AAAA,MACpB,OAAO,QAAQ;AAAA,MACf,UAAU,QAAQ;AAAA,MAClB,kBAAkB,QAAQ,mBAAmB,QAAQ,mBAAmB;AAAA,MACxE,gBAAgB,QAAQ;AAAA,MACxB,iBAAiB,QAAQ;AAAA,MACzB,KAAK,QAAQ;AAAA,MACb,MAAM,QAAQ;AAAA,MACd,OAAO,QAAQ;AAAA,MACf,YAAY,QAAQ;AAAA,MACpB,aAAa,QAAQ,gBAAgB,SAAY,QAAQ,cAAc;AAAA,MACvE,KAAK,QAAQ;AAAA,MACb,yBAAyB,QAAQ;AAAA,MACjC,YAAY,QAAQ;AAAA,IACtB,CAAC;AAMD,SAAK,cAAc,QAAQ,gBAAgB,SAAY,QAAQ,cAAc;AAM7E,SAAK,YAAY,QAAQ,cAAc,SAAY,QAAQ,YAAY;AAMvE,SAAK,wBAAwB,CAAC;AAM9B,SAAK,8BAA8B,QAAQ;AAM3C,SAAK,2BAA2B;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,uBAAuB,YAAY;AACjC,QAAI,KAAK,cAAc,KAAK,cAAc,CAAC,WAAW,KAAK,cAAc,GAAG,UAAU,GAAG;AACvF,aAAO;AAAA,IACT;AACA,WAAO,KAAK,UAAU;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA,EAKA,YAAY;AACV,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,SAAS;AACP,QAAI,MAAM,MAAM,OAAO;AACvB,QAAI,CAAC,KAAK,eAAe,GAAG;AAC1B,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,yBAAyB,YAAY;AACnC,UAAM,WAAW,KAAK,cAAc;AACpC,QAAI,KAAK,aAAa,CAAC,YAAY,WAAW,UAAU,UAAU,IAAI;AACpE,aAAO,KAAK;AAAA,IACd;AACA,UAAM,UAAU,OAAO,UAAU;AACjC,QAAI,EAAE,WAAW,KAAK,wBAAwB;AAC5C,WAAK,sBAAsB,OAAO,IAAI,iBAAyB,UAAU;AAAA,IAC3E;AACA,WAAO,KAAK,sBAAsB,OAAO;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,YAAY,GAAG,GAAG,GAAG,YAAY,YAAY,KAAK;AAChD,UAAM,YAAY,CAAC,GAAG,GAAG,CAAC;AAC1B,UAAM,eAAe,KAAK,+BAA+B,WAAW,UAAU;AAC9E,UAAM,UAAU,eAAe,KAAK,gBAAgB,cAAc,YAAY,UAAU,IAAI;AAC5F,UAAM,OAAO,IAAI,KAAK,UAAU,WAAW,YAAY,SAAY,kBAAU,OAAO,kBAAU,OAAO,YAAY,SAAY,UAAU,IAAI,KAAK,aAAa,KAAK,kBAAkB,KAAK,WAAW;AACpM,SAAK,MAAM;AACX,SAAK,iBAAiB,kBAAU,QAAQ,KAAK,iBAAiB,KAAK,IAAI,CAAC;AACxE,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,QAAQ,GAAG,GAAG,GAAG,YAAY,YAAY;AACvC,UAAM,mBAAmB,KAAK,cAAc;AAC5C,QAAI,CAAC,oBAAoB,CAAC,cAAc,WAAW,kBAAkB,UAAU,GAAG;AAChF,aAAO,KAAK,gBAAgB,GAAG,GAAG,GAAG,YAAY,oBAAoB,UAAU;AAAA,IACjF;AACA,UAAM,YAAY,CAAC,GAAG,GAAG,CAAC;AAC1B,UAAM,MAAM,KAAK,OAAO;AACxB,UAAM,iBAAiB,KAAK,yBAAyB,gBAAgB;AACrE,UAAM,iBAAiB,KAAK,yBAAyB,UAAU;AAC/D,UAAM,mBAAmB,KAAK,+BAA+B,WAAW,UAAU;AAClF,UAAM,OAAO,IAAI,aAAW,kBAAkB,gBAAgB,YAAY,gBAAgB,WAAW,kBAAkB,KAAK,kBAAkB,UAAU,GAAG,KAAK,UAAU,GAAG,CAACC,IAAGC,IAAGC,IAAGC,gBAAe,KAAK,gBAAgBH,IAAGC,IAAGC,IAAGC,aAAY,gBAAgB,GAAG,KAAK,6BAA6B,KAAK,0BAA0B,KAAK,WAAW;AACpV,SAAK,MAAM;AACX,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,gBAAgB,GAAG,GAAG,GAAG,YAAY,YAAY;AAC/C,UAAM,MAAM,KAAK,OAAO;AACxB,WAAO,KAAK,YAAY,GAAG,GAAG,GAAG,YAAY,YAAY,GAAG;AAAA,EAC9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,2BAA2B,QAAQ;AACjC,QAAI,KAAK,4BAA4B,QAAQ;AAC3C;AAAA,IACF;AACA,SAAK,2BAA2B;AAChC,SAAK,QAAQ;AAAA,EACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,yBAAyB,YAAY,UAAU;AAC7C,UAAM,OAAO,IAAc,UAAU;AACrC,QAAI,MAAM;AACR,YAAM,UAAU,OAAO,IAAI;AAC3B,UAAI,EAAE,WAAW,KAAK,wBAAwB;AAC5C,aAAK,sBAAsB,OAAO,IAAI;AAAA,MACxC;AAAA,IACF;AAAA,EACF;AACF;AAMA,SAAS,wBAAwB,WAAW,KAAK;AACC,YAAU,SAAS,EAAE,MAAM;AAC7E;AACA,IAAO,oBAAQ;;;ACpMf,IAAM,MAAN,cAAkB,kBAAU;AAAA;AAAA;AAAA;AAAA,EAI1B,YAAY,SAAS;AACnB,cAAU,WAAW,CAAC;AACtB,UAAM,aAAa,QAAQ,eAAe,SAAY,QAAQ,aAAa;AAC3E,UAAM,WAAW,QAAQ,aAAa,SAAY,QAAQ,WAAW,UAAU;AAAA,MAC7E,QAAQ,qBAAqB,UAAU;AAAA,MACvC,eAAe,QAAQ;AAAA,MACvB,SAAS,QAAQ;AAAA,MACjB,SAAS,QAAQ;AAAA,MACjB,UAAU,QAAQ;AAAA,IACpB,CAAC;AACD,UAAM;AAAA,MACJ,cAAc,QAAQ;AAAA,MACtB,WAAW,QAAQ;AAAA,MACnB,aAAa,QAAQ;AAAA,MACrB,aAAa,QAAQ;AAAA,MACrB;AAAA,MACA,4BAA4B,QAAQ;AAAA,MACpC;AAAA,MACA,kBAAkB,QAAQ;AAAA,MAC1B,gBAAgB,QAAQ;AAAA,MACxB,iBAAiB,QAAQ;AAAA,MACzB,KAAK,QAAQ;AAAA,MACb,MAAM,QAAQ;AAAA,MACd,OAAO,QAAQ,UAAU,SAAY,QAAQ,QAAQ;AAAA,MACrD,YAAY,QAAQ;AAAA,MACpB,yBAAyB,QAAQ;AAAA,MACjC,YAAY,QAAQ;AAAA,IACtB,CAAC;AAMD,SAAK,UAAU,QAAQ,WAAW,SAAY,QAAQ,SAAS;AAAA,EACjE;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,YAAY;AACV,WAAO,KAAK;AAAA,EACd;AACF;AACA,IAAO,cAAQ;;;AC3GR,IAAM,cAAc;AAmC3B,IAAM,MAAN,cAAkB,YAAI;AAAA;AAAA;AAAA;AAAA,EAIpB,YAAY,SAAS;AACnB,cAAU,WAAW,CAAC;AACtB,QAAI;AACJ,QAAI,QAAQ,iBAAiB,QAAW;AACtC,qBAAe,QAAQ;AAAA,IACzB,OAAO;AACL,qBAAe,CAAC,WAAW;AAAA,IAC7B;AACA,UAAM,cAAc,QAAQ,gBAAgB,SAAY,QAAQ,cAAc;AAC9E,UAAM,MAAM,QAAQ,QAAQ,SAAY,QAAQ,MAAM;AACtD,UAAM;AAAA,MACJ;AAAA,MACA,yBAAyB;AAAA,MACzB,WAAW,QAAQ;AAAA,MACnB;AAAA,MACA,aAAa,QAAQ;AAAA,MACrB,SAAS,QAAQ,YAAY,SAAY,QAAQ,UAAU;AAAA,MAC3D,4BAA4B,QAAQ;AAAA,MACpC,kBAAkB,QAAQ;AAAA,MAC1B,YAAY,QAAQ;AAAA,MACpB;AAAA,MACA,OAAO,QAAQ;AAAA,MACf,YAAY,QAAQ;AAAA,IACtB,CAAC;AAAA,EACH;AACF;AACA,IAAO,cAAQ;",
  "names": ["createOrUpdate", "scale", "Tile_default", "Tile_default", "z", "x", "y", "pixelRatio"]
}
