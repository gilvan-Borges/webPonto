{
  "version": 3,
  "sources": ["../../../../../../node_modules/ol/css.js"],
  "sourcesContent": ["/**\r\n * @module ol/css\r\n */\n\n/**\r\n * @typedef {Object} FontParameters\r\n * @property {string} style Style.\r\n * @property {string} variant Variant.\r\n * @property {string} weight Weight.\r\n * @property {string} size Size.\r\n * @property {string} lineHeight LineHeight.\r\n * @property {string} family Family.\r\n * @property {Array<string>} families Families.\r\n */\n\n/**\r\n * The CSS class for hidden feature.\r\n *\r\n * @const\r\n * @type {string}\r\n */\nexport const CLASS_HIDDEN = 'ol-hidden';\n\n/**\r\n * The CSS class that we'll give the DOM elements to have them selectable.\r\n *\r\n * @const\r\n * @type {string}\r\n */\nexport const CLASS_SELECTABLE = 'ol-selectable';\n\n/**\r\n * The CSS class that we'll give the DOM elements to have them unselectable.\r\n *\r\n * @const\r\n * @type {string}\r\n */\nexport const CLASS_UNSELECTABLE = 'ol-unselectable';\n\n/**\r\n * The CSS class for unsupported feature.\r\n *\r\n * @const\r\n * @type {string}\r\n */\nexport const CLASS_UNSUPPORTED = 'ol-unsupported';\n\n/**\r\n * The CSS class for controls.\r\n *\r\n * @const\r\n * @type {string}\r\n */\nexport const CLASS_CONTROL = 'ol-control';\n\n/**\r\n * The CSS class that we'll give the DOM elements that are collapsed, i.e.\r\n * to those elements which usually can be expanded.\r\n *\r\n * @const\r\n * @type {string}\r\n */\nexport const CLASS_COLLAPSED = 'ol-collapsed';\n\n/**\r\n * From https://stackoverflow.com/questions/10135697/regex-to-parse-any-css-font\r\n * @type {RegExp}\r\n */\nconst fontRegEx = new RegExp(['^\\\\s*(?=(?:(?:[-a-z]+\\\\s*){0,2}(italic|oblique))?)', '(?=(?:(?:[-a-z]+\\\\s*){0,2}(small-caps))?)', '(?=(?:(?:[-a-z]+\\\\s*){0,2}(bold(?:er)?|lighter|[1-9]00 ))?)', '(?:(?:normal|\\\\1|\\\\2|\\\\3)\\\\s*){0,3}((?:xx?-)?', '(?:small|large)|medium|smaller|larger|[\\\\.\\\\d]+(?:\\\\%|in|[cem]m|ex|p[ctx]))', '(?:\\\\s*\\\\/\\\\s*(normal|[\\\\.\\\\d]+(?:\\\\%|in|[cem]m|ex|p[ctx])?))', '?\\\\s*([-,\\\\\"\\\\\\'\\\\sa-z]+?)\\\\s*$'].join(''), 'i');\n/** @type {Array<'style'|'variant'|'weight'|'size'|'lineHeight'|'family'>} */\nconst fontRegExMatchIndex = ['style', 'variant', 'weight', 'size', 'lineHeight', 'family'];\n\n/**\r\n * Get the list of font families from a font spec.  Note that this doesn't work\r\n * for font families that have commas in them.\r\n * @param {string} fontSpec The CSS font property.\r\n * @return {FontParameters|null} The font parameters (or null if the input spec is invalid).\r\n */\nexport const getFontParameters = function (fontSpec) {\n  const match = fontSpec.match(fontRegEx);\n  if (!match) {\n    return null;\n  }\n  const style = /** @type {FontParameters} */{\n    lineHeight: 'normal',\n    size: '1.2em',\n    style: 'normal',\n    weight: 'normal',\n    variant: 'normal'\n  };\n  for (let i = 0, ii = fontRegExMatchIndex.length; i < ii; ++i) {\n    const value = match[i + 1];\n    if (value !== undefined) {\n      style[fontRegExMatchIndex[i]] = value;\n    }\n  }\n  style.families = style.family.split(/,\\s?/);\n  return style;\n};"],
  "mappings": ";AAqBO,IAAM,eAAe;AAQrB,IAAM,mBAAmB;AAQzB,IAAM,qBAAqB;AAgB3B,IAAM,gBAAgB;AAStB,IAAM,kBAAkB;AAM/B,IAAM,YAAY,IAAI,OAAO,CAAC,sDAAsD,6CAA6C,+DAA+D,iDAAiD,+EAA+E,iEAAiE,gCAAiC,EAAE,KAAK,EAAE,GAAG,GAAG;AAEjb,IAAM,sBAAsB,CAAC,SAAS,WAAW,UAAU,QAAQ,cAAc,QAAQ;AAQlF,IAAM,oBAAoB,SAAU,UAAU;AACnD,QAAM,QAAQ,SAAS,MAAM,SAAS;AACtC,MAAI,CAAC,OAAO;AACV,WAAO;AAAA,EACT;AACA,QAAM;AAAA;AAAA,IAAqC;AAAA,MACzC,YAAY;AAAA,MACZ,MAAM;AAAA,MACN,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAS;AAAA,IACX;AAAA;AACA,WAAS,IAAI,GAAG,KAAK,oBAAoB,QAAQ,IAAI,IAAI,EAAE,GAAG;AAC5D,UAAM,QAAQ,MAAM,IAAI,CAAC;AACzB,QAAI,UAAU,QAAW;AACvB,YAAM,oBAAoB,CAAC,CAAC,IAAI;AAAA,IAClC;AAAA,EACF;AACA,QAAM,WAAW,MAAM,OAAO,MAAM,MAAM;AAC1C,SAAO;AACT;",
  "names": []
}
